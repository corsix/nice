// Autogenerated by nicify.lua -- do not edit by hand.
#include <nice/wic.h>
namespace C6
{
  namespace WIC
  {
    void Stream::initializeFromIStreamRegion(ULARGE_INTEGER ulOffset, ULARGE_INTEGER ulMaxSize)
    {
      HRESULT hr = getRawInterface()->InitializeFromIStreamRegion(nullptr, ulOffset, ulMaxSize);
      if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromIStreamRegion");
    }

    void Stream::initializeFromIStreamRegion(COMStream& pIStream, ULARGE_INTEGER ulOffset, ULARGE_INTEGER ulMaxSize)
    {
      HRESULT hr = getRawInterface()->InitializeFromIStreamRegion(pIStream.getRawInterface(), ulOffset, ulMaxSize);
      if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromIStreamRegion");
    }

    void Stream::initializeFromFilename(LPCWSTR wzFileName, DWORD dwDesiredAccess)
    {
      HRESULT hr = getRawInterface()->InitializeFromFilename(wzFileName, dwDesiredAccess);
      if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromFilename");
    }

    void Stream::initializeFromIStream()
    {
      HRESULT hr = getRawInterface()->InitializeFromIStream(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromIStream");
    }

    void Stream::initializeFromIStream(COMStream& pIStream)
    {
      HRESULT hr = getRawInterface()->InitializeFromIStream(pIStream.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromIStream");
    }

    void FastMetadataEncoder::commit()
    {
      HRESULT hr = getRawInterface()->Commit();
      if(FAILED(hr)) throw COMException(hr, "IWICFastMetadataEncoder::Commit");
    }

    WIC::MetadataQueryWriter FastMetadataEncoder::getMetadataQueryWriter()
    {
      IWICMetadataQueryWriter* ppIMetadataQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->GetMetadataQueryWriter(&ppIMetadataQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICFastMetadataEncoder::GetMetadataQueryWriter");
      return WIC::MetadataQueryWriter(ppIMetadataQueryWriter);
    }

    void Palette::initializeFromPalette()
    {
      HRESULT hr = getRawInterface()->InitializeFromPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializeFromPalette");
    }

    void Palette::initializeFromPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->InitializeFromPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializeFromPalette");
    }

    bool Palette::isBlackWhite()
    {
      BOOL pfIsBlackWhite = BOOL();
      HRESULT hr = getRawInterface()->IsBlackWhite(&pfIsBlackWhite);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::IsBlackWhite");
      return pfIsBlackWhite != FALSE;
    }

    bool Palette::hasAlpha()
    {
      BOOL pfHasAlpha = BOOL();
      HRESULT hr = getRawInterface()->HasAlpha(&pfHasAlpha);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::HasAlpha");
      return pfHasAlpha != FALSE;
    }

    void Palette::initializeFromBitmap(unsigned int cCount, BOOL fAddTransparentColor)
    {
      HRESULT hr = getRawInterface()->InitializeFromBitmap(nullptr, cCount, fAddTransparentColor);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializeFromBitmap");
    }

    void Palette::initializeFromBitmap(WIC::BitmapSource& pISurface, unsigned int cCount, BOOL fAddTransparentColor)
    {
      HRESULT hr = getRawInterface()->InitializeFromBitmap(pISurface.getRawInterface(), cCount, fAddTransparentColor);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializeFromBitmap");
    }

    WICBitmapPaletteType Palette::getType()
    {
      WICBitmapPaletteType pePaletteType = WICBitmapPaletteType();
      HRESULT hr = getRawInterface()->GetType(&pePaletteType);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::GetType");
      return pePaletteType;
    }

    void Palette::initializePredefined(WICBitmapPaletteType ePaletteType, BOOL fAddTransparentColor)
    {
      HRESULT hr = getRawInterface()->InitializePredefined(ePaletteType, fAddTransparentColor);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializePredefined");
    }

    std::tuple<WICColor, unsigned int> Palette::getColors(unsigned int cCount)
    {
      WICColor pColors = WICColor();
      unsigned int pcActualColors = unsigned int();
      HRESULT hr = getRawInterface()->GetColors(cCount, &pColors, &pcActualColors);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::GetColors");
      return std::make_tuple(std::move(pColors), std::move(pcActualColors));
    }

    unsigned int Palette::getColorCount()
    {
      unsigned int pcCount = unsigned int();
      HRESULT hr = getRawInterface()->GetColorCount(&pcCount);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::GetColorCount");
      return pcCount;
    }

    bool Palette::isGrayscale()
    {
      BOOL pfIsGrayscale = BOOL();
      HRESULT hr = getRawInterface()->IsGrayscale(&pfIsGrayscale);
      if(FAILED(hr)) throw COMException(hr, "IWICPalette::IsGrayscale");
      return pfIsGrayscale != FALSE;
    }

    void EnumMetadataItem::skip(ULONG celt)
    {
      HRESULT hr = getRawInterface()->Skip(celt);
      if(FAILED(hr)) throw COMException(hr, "IWICEnumMetadataItem::Skip");
    }

    void EnumMetadataItem::reset()
    {
      HRESULT hr = getRawInterface()->Reset();
      if(FAILED(hr)) throw COMException(hr, "IWICEnumMetadataItem::Reset");
    }

    WIC::EnumMetadataItem EnumMetadataItem::clone()
    {
      IWICEnumMetadataItem* ppIEnumMetadataItem = nullptr;
      HRESULT hr = getRawInterface()->Clone(&ppIEnumMetadataItem);
      if(FAILED(hr)) throw COMException(hr, "IWICEnumMetadataItem::Clone");
      return WIC::EnumMetadataItem(ppIEnumMetadataItem);
    }

    void BitmapCodecProgressNotification::registerProgressNotification(PFNProgressNotification pfnProgressNotification, LPVOID pvData, DWORD dwProgressFlags)
    {
      HRESULT hr = getRawInterface()->RegisterProgressNotification(pfnProgressNotification, pvData, dwProgressFlags);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecProgressNotification::RegisterProgressNotification");
    }

    void ProgressiveLevelControl::setCurrentLevel(unsigned int nLevel)
    {
      HRESULT hr = getRawInterface()->SetCurrentLevel(nLevel);
      if(FAILED(hr)) throw COMException(hr, "IWICProgressiveLevelControl::SetCurrentLevel");
    }

    unsigned int ProgressiveLevelControl::getCurrentLevel()
    {
      unsigned int pnLevel = unsigned int();
      HRESULT hr = getRawInterface()->GetCurrentLevel(&pnLevel);
      if(FAILED(hr)) throw COMException(hr, "IWICProgressiveLevelControl::GetCurrentLevel");
      return pnLevel;
    }

    unsigned int ProgressiveLevelControl::getLevelCount()
    {
      unsigned int pcLevels = unsigned int();
      HRESULT hr = getRawInterface()->GetLevelCount(&pcLevels);
      if(FAILED(hr)) throw COMException(hr, "IWICProgressiveLevelControl::GetLevelCount");
      return pcLevels;
    }

    void BitmapFrameEncode::setPixelFormat(WICPixelFormatGUID* pPixelFormat)
    {
      HRESULT hr = getRawInterface()->SetPixelFormat(pPixelFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetPixelFormat");
    }

    WIC::MetadataQueryWriter BitmapFrameEncode::getMetadataQueryWriter()
    {
      IWICMetadataQueryWriter* ppIMetadataQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->GetMetadataQueryWriter(&ppIMetadataQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::GetMetadataQueryWriter");
      return WIC::MetadataQueryWriter(ppIMetadataQueryWriter);
    }

    void BitmapFrameEncode::setPalette()
    {
      HRESULT hr = getRawInterface()->SetPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetPalette");
    }

    void BitmapFrameEncode::setPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->SetPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetPalette");
    }

    void BitmapFrameEncode::writeSource()
    {
      HRESULT hr = getRawInterface()->WriteSource(nullptr, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::WriteSource");
    }

    void BitmapFrameEncode::writeSource(WIC::BitmapSource& pIBitmapSource)
    {
      HRESULT hr = getRawInterface()->WriteSource(pIBitmapSource.getRawInterface(), nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::WriteSource");
    }

    void BitmapFrameEncode::writeSource(WIC::BitmapSource& pIBitmapSource, WICRect* prc)
    {
      HRESULT hr = getRawInterface()->WriteSource(pIBitmapSource.getRawInterface(), prc);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::WriteSource");
    }

    void BitmapFrameEncode::initialize()
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::Initialize");
    }

    void BitmapFrameEncode::initialize(IPropertyBag2* pIEncoderOptions)
    {
      HRESULT hr = getRawInterface()->Initialize(pIEncoderOptions);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::Initialize");
    }

    void BitmapFrameEncode::setSize(unsigned int uiWidth, unsigned int uiHeight)
    {
      HRESULT hr = getRawInterface()->SetSize(uiWidth, uiHeight);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetSize");
    }

    void BitmapFrameEncode::commit()
    {
      HRESULT hr = getRawInterface()->Commit();
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::Commit");
    }

    void BitmapFrameEncode::setResolution(double dpiX, double dpiY)
    {
      HRESULT hr = getRawInterface()->SetResolution(dpiX, dpiY);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetResolution");
    }

    void BitmapFrameEncode::setThumbnail()
    {
      HRESULT hr = getRawInterface()->SetThumbnail(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetThumbnail");
    }

    void BitmapFrameEncode::setThumbnail(WIC::BitmapSource& pIThumbnail)
    {
      HRESULT hr = getRawInterface()->SetThumbnail(pIThumbnail.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetThumbnail");
    }

    void DevelopRawNotificationCallback::notify(unsigned int NotificationMask)
    {
      HRESULT hr = getRawInterface()->Notify(NotificationMask);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRawNotificationCallback::Notify");
    }

    std::tuple<unsigned int, unsigned int> BitmapLock::getSize()
    {
      unsigned int puiWidth = unsigned int();
      unsigned int puiHeight = unsigned int();
      HRESULT hr = getRawInterface()->GetSize(&puiWidth, &puiHeight);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapLock::GetSize");
      return std::make_tuple(std::move(puiWidth), std::move(puiHeight));
    }

    unsigned int BitmapLock::getStride()
    {
      unsigned int pcbStride = unsigned int();
      HRESULT hr = getRawInterface()->GetStride(&pcbStride);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapLock::GetStride");
      return pcbStride;
    }

    WICPixelFormatGUID BitmapLock::getPixelFormat()
    {
      WICPixelFormatGUID pPixelFormat = WICPixelFormatGUID();
      HRESULT hr = getRawInterface()->GetPixelFormat(&pPixelFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapLock::GetPixelFormat");
      return pPixelFormat;
    }

    std::tuple<unsigned int, WICInProcPointer> BitmapLock::getDataPointer()
    {
      unsigned int pcbBufferSize = unsigned int();
      WICInProcPointer ppbData = WICInProcPointer();
      HRESULT hr = getRawInterface()->GetDataPointer(&pcbBufferSize, &ppbData);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapLock::GetDataPointer");
      return std::make_tuple(std::move(pcbBufferSize), std::move(ppbData));
    }

    WIC::FastMetadataEncoder ImagingFactory::createFastMetadataEncoderFromFrameDecode()
    {
      IWICFastMetadataEncoder* ppIFastEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateFastMetadataEncoderFromFrameDecode(nullptr, &ppIFastEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode");
      return WIC::FastMetadataEncoder(ppIFastEncoder);
    }

    WIC::FastMetadataEncoder ImagingFactory::createFastMetadataEncoderFromFrameDecode(WIC::BitmapFrameDecode& pIFrameDecoder)
    {
      IWICFastMetadataEncoder* ppIFastEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateFastMetadataEncoderFromFrameDecode(pIFrameDecoder.getRawInterface(), &ppIFastEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateFastMetadataEncoderFromFrameDecode");
      return WIC::FastMetadataEncoder(ppIFastEncoder);
    }

    WIC::BitmapFlipRotator ImagingFactory::createBitmapFlipRotator()
    {
      IWICBitmapFlipRotator* ppIBitmapFlipRotator = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFlipRotator(&ppIBitmapFlipRotator);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFlipRotator");
      return WIC::BitmapFlipRotator(ppIBitmapFlipRotator);
    }

    WIC::MetadataQueryWriter ImagingFactory::createQueryWriterFromReader()
    {
      IWICMetadataQueryWriter* ppIQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->CreateQueryWriterFromReader(nullptr, nullptr, &ppIQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateQueryWriterFromReader");
      return WIC::MetadataQueryWriter(ppIQueryWriter);
    }

    WIC::MetadataQueryWriter ImagingFactory::createQueryWriterFromReader(WIC::MetadataQueryReader& pIQueryReader)
    {
      IWICMetadataQueryWriter* ppIQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->CreateQueryWriterFromReader(pIQueryReader.getRawInterface(), nullptr, &ppIQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateQueryWriterFromReader");
      return WIC::MetadataQueryWriter(ppIQueryWriter);
    }

    WIC::MetadataQueryWriter ImagingFactory::createQueryWriterFromReader(WIC::MetadataQueryReader& pIQueryReader, const GUID& pguidVendor)
    {
      IWICMetadataQueryWriter* ppIQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->CreateQueryWriterFromReader(pIQueryReader.getRawInterface(), &pguidVendor, &ppIQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateQueryWriterFromReader");
      return WIC::MetadataQueryWriter(ppIQueryWriter);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromFileHandle(ULONG_PTR hFile, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromFileHandle(hFile, nullptr, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromFileHandle");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromFileHandle(ULONG_PTR hFile, const GUID& pguidVendor, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromFileHandle(hFile, &pguidVendor, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromFileHandle");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::ColorTransform ImagingFactory::createColorTransformer()
    {
      IWICColorTransform* ppIWICColorTransform = nullptr;
      HRESULT hr = getRawInterface()->CreateColorTransformer(&ppIWICColorTransform);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateColorTransformer");
      return WIC::ColorTransform(ppIWICColorTransform);
    }

    IEnumUnknown* ImagingFactory::createComponentEnumerator(DWORD componentTypes, DWORD options)
    {
      IEnumUnknown* ppIEnumUnknown = nullptr;
      HRESULT hr = getRawInterface()->CreateComponentEnumerator(componentTypes, options, &ppIEnumUnknown);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateComponentEnumerator");
      return ppIEnumUnknown;
    }

    WIC::Palette ImagingFactory::createPalette()
    {
      IWICPalette* ppIPalette = nullptr;
      HRESULT hr = getRawInterface()->CreatePalette(&ppIPalette);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreatePalette");
      return WIC::Palette(ppIPalette);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromSource(WICBitmapCreateCacheOption option)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromSource(nullptr, option, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromSource");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromSource(WIC::BitmapSource& pIBitmapSource, WICBitmapCreateCacheOption option)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromSource(pIBitmapSource.getRawInterface(), option, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromSource");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoder(REFGUID guidContainerFormat)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoder(guidContainerFormat, nullptr, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoder");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoder(REFGUID guidContainerFormat, const GUID& pguidVendor)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoder(guidContainerFormat, &pguidVendor, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoder");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::MetadataQueryWriter ImagingFactory::createQueryWriter(REFGUID guidMetadataFormat)
    {
      IWICMetadataQueryWriter* ppIQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->CreateQueryWriter(guidMetadataFormat, nullptr, &ppIQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateQueryWriter");
      return WIC::MetadataQueryWriter(ppIQueryWriter);
    }

    WIC::MetadataQueryWriter ImagingFactory::createQueryWriter(REFGUID guidMetadataFormat, const GUID& pguidVendor)
    {
      IWICMetadataQueryWriter* ppIQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->CreateQueryWriter(guidMetadataFormat, &pguidVendor, &ppIQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateQueryWriter");
      return WIC::MetadataQueryWriter(ppIQueryWriter);
    }

    WIC::BitmapEncoder ImagingFactory::createEncoder(REFGUID guidContainerFormat)
    {
      IWICBitmapEncoder* ppIEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateEncoder(guidContainerFormat, nullptr, &ppIEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateEncoder");
      return WIC::BitmapEncoder(ppIEncoder);
    }

    WIC::BitmapEncoder ImagingFactory::createEncoder(REFGUID guidContainerFormat, const GUID& pguidVendor)
    {
      IWICBitmapEncoder* ppIEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateEncoder(guidContainerFormat, &pguidVendor, &ppIEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateEncoder");
      return WIC::BitmapEncoder(ppIEncoder);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromSourceRect(unsigned int x, unsigned int y, unsigned int width, unsigned int height)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromSourceRect(nullptr, x, y, width, height, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromSourceRect");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromSourceRect(WIC::BitmapSource& pIBitmapSource, unsigned int x, unsigned int y, unsigned int width, unsigned int height)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromSourceRect(pIBitmapSource.getRawInterface(), x, y, width, height, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromSourceRect");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::FastMetadataEncoder ImagingFactory::createFastMetadataEncoderFromDecoder()
    {
      IWICFastMetadataEncoder* ppIFastEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateFastMetadataEncoderFromDecoder(nullptr, &ppIFastEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateFastMetadataEncoderFromDecoder");
      return WIC::FastMetadataEncoder(ppIFastEncoder);
    }

    WIC::FastMetadataEncoder ImagingFactory::createFastMetadataEncoderFromDecoder(WIC::BitmapDecoder& pIDecoder)
    {
      IWICFastMetadataEncoder* ppIFastEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateFastMetadataEncoderFromDecoder(pIDecoder.getRawInterface(), &ppIFastEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateFastMetadataEncoderFromDecoder");
      return WIC::FastMetadataEncoder(ppIFastEncoder);
    }

    WIC::Stream ImagingFactory::createStream()
    {
      IWICStream* ppIWICStream = nullptr;
      HRESULT hr = getRawInterface()->CreateStream(&ppIWICStream);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateStream");
      return WIC::Stream(ppIWICStream);
    }

    WIC::BitmapScaler ImagingFactory::createBitmapScaler()
    {
      IWICBitmapScaler* ppIBitmapScaler = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapScaler(&ppIBitmapScaler);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapScaler");
      return WIC::BitmapScaler(ppIBitmapScaler);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromStream(WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromStream(nullptr, nullptr, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromStream");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromStream(COMStream& pIStream, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromStream(pIStream.getRawInterface(), nullptr, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromStream");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromStream(COMStream& pIStream, const GUID& pguidVendor, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromStream(pIStream.getRawInterface(), &pguidVendor, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromStream");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapClipper ImagingFactory::createBitmapClipper()
    {
      IWICBitmapClipper* ppIBitmapClipper = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapClipper(&ppIBitmapClipper);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapClipper");
      return WIC::BitmapClipper(ppIBitmapClipper);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromFilename(LPCWSTR wzFilename, DWORD dwDesiredAccess, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromFilename(wzFilename, nullptr, dwDesiredAccess, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromFilename");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::BitmapDecoder ImagingFactory::createDecoderFromFilename(LPCWSTR wzFilename, const GUID& pguidVendor, DWORD dwDesiredAccess, WICDecodeOptions metadataOptions)
    {
      IWICBitmapDecoder* ppIDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateDecoderFromFilename(wzFilename, &pguidVendor, dwDesiredAccess, metadataOptions, &ppIDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateDecoderFromFilename");
      return WIC::BitmapDecoder(ppIDecoder);
    }

    WIC::Bitmap ImagingFactory::createBitmap(unsigned int uiWidth, unsigned int uiHeight, REFWICPixelFormatGUID pixelFormat, WICBitmapCreateCacheOption option)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmap(uiWidth, uiHeight, pixelFormat, option, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmap");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromHICON(HICON hIcon)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromHICON(hIcon, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromHICON");
      return WIC::Bitmap(ppIBitmap);
    }

    WIC::ComponentInfo ImagingFactory::createComponentInfo(REFCLSID clsidComponent)
    {
      IWICComponentInfo* ppIInfo = nullptr;
      HRESULT hr = getRawInterface()->CreateComponentInfo(clsidComponent, &ppIInfo);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateComponentInfo");
      return WIC::ComponentInfo(ppIInfo);
    }

    WIC::FormatConverter ImagingFactory::createFormatConverter()
    {
      IWICFormatConverter* ppIFormatConverter = nullptr;
      HRESULT hr = getRawInterface()->CreateFormatConverter(&ppIFormatConverter);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateFormatConverter");
      return WIC::FormatConverter(ppIFormatConverter);
    }

    WIC::ColorContext ImagingFactory::createColorContext()
    {
      IWICColorContext* ppIWICColorContext = nullptr;
      HRESULT hr = getRawInterface()->CreateColorContext(&ppIWICColorContext);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateColorContext");
      return WIC::ColorContext(ppIWICColorContext);
    }

    WIC::Bitmap ImagingFactory::createBitmapFromHBITMAP(HBITMAP hBitmap, HPALETTE hPalette, WICBitmapAlphaChannelOption options)
    {
      IWICBitmap* ppIBitmap = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapFromHBITMAP(hBitmap, hPalette, options, &ppIBitmap);
      if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromHBITMAP");
      return WIC::Bitmap(ppIBitmap);
    }

    void BitmapSource::copyPalette()
    {
      HRESULT hr = getRawInterface()->CopyPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::CopyPalette");
    }

    void BitmapSource::copyPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->CopyPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::CopyPalette");
    }

    std::tuple<double, double> BitmapSource::getResolution()
    {
      double pDpiX = double();
      double pDpiY = double();
      HRESULT hr = getRawInterface()->GetResolution(&pDpiX, &pDpiY);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::GetResolution");
      return std::make_tuple(std::move(pDpiX), std::move(pDpiY));
    }

    BYTE BitmapSource::copyPixels(unsigned int cbStride, unsigned int cbBufferSize)
    {
      BYTE pbBuffer = BYTE();
      HRESULT hr = getRawInterface()->CopyPixels(nullptr, cbStride, cbBufferSize, &pbBuffer);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::CopyPixels");
      return pbBuffer;
    }

    BYTE BitmapSource::copyPixels(const WICRect& prc, unsigned int cbStride, unsigned int cbBufferSize)
    {
      BYTE pbBuffer = BYTE();
      HRESULT hr = getRawInterface()->CopyPixels(&prc, cbStride, cbBufferSize, &pbBuffer);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::CopyPixels");
      return pbBuffer;
    }

    WICPixelFormatGUID BitmapSource::getPixelFormat()
    {
      WICPixelFormatGUID pPixelFormat = WICPixelFormatGUID();
      HRESULT hr = getRawInterface()->GetPixelFormat(&pPixelFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::GetPixelFormat");
      return pPixelFormat;
    }

    std::tuple<unsigned int, unsigned int> BitmapSource::getSize()
    {
      unsigned int puiWidth = unsigned int();
      unsigned int puiHeight = unsigned int();
      HRESULT hr = getRawInterface()->GetSize(&puiWidth, &puiHeight);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSource::GetSize");
      return std::make_tuple(std::move(puiWidth), std::move(puiHeight));
    }

    WIC::MetadataQueryReader BitmapFrameDecode::getMetadataQueryReader()
    {
      IWICMetadataQueryReader* ppIMetadataQueryReader = nullptr;
      HRESULT hr = getRawInterface()->GetMetadataQueryReader(&ppIMetadataQueryReader);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameDecode::GetMetadataQueryReader");
      return WIC::MetadataQueryReader(ppIMetadataQueryReader);
    }

    WIC::BitmapSource BitmapFrameDecode::getThumbnail()
    {
      IWICBitmapSource* ppIThumbnail = nullptr;
      HRESULT hr = getRawInterface()->GetThumbnail(&ppIThumbnail);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameDecode::GetThumbnail");
      return WIC::BitmapSource(ppIThumbnail);
    }

    WICNamedWhitePoint DevelopRaw::getNamedWhitePoint()
    {
      WICNamedWhitePoint pWhitePoint = WICNamedWhitePoint();
      HRESULT hr = getRawInterface()->GetNamedWhitePoint(&pWhitePoint);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetNamedWhitePoint");
      return pWhitePoint;
    }

    std::tuple<unsigned int, unsigned int, unsigned int> DevelopRaw::getKelvinRangeInfo()
    {
      unsigned int pMinKelvinTemp = unsigned int();
      unsigned int pMaxKelvinTemp = unsigned int();
      unsigned int pKelvinTempStepValue = unsigned int();
      HRESULT hr = getRawInterface()->GetKelvinRangeInfo(&pMinKelvinTemp, &pMaxKelvinTemp, &pKelvinTempStepValue);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetKelvinRangeInfo");
      return std::make_tuple(std::move(pMinKelvinTemp), std::move(pMaxKelvinTemp), std::move(pKelvinTempStepValue));
    }

    void DevelopRaw::setWhitePointKelvin(unsigned int WhitePointKelvin)
    {
      HRESULT hr = getRawInterface()->SetWhitePointKelvin(WhitePointKelvin);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetWhitePointKelvin");
    }

    double DevelopRaw::getContrast()
    {
      double pContrast = double();
      HRESULT hr = getRawInterface()->GetContrast(&pContrast);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetContrast");
      return pContrast;
    }

    void DevelopRaw::setGamma(double Gamma)
    {
      HRESULT hr = getRawInterface()->SetGamma(Gamma);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetGamma");
    }

    double DevelopRaw::getRotation()
    {
      double pRotation = double();
      HRESULT hr = getRawInterface()->GetRotation(&pRotation);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetRotation");
      return pRotation;
    }

    void DevelopRaw::setNoiseReduction(double NoiseReduction)
    {
      HRESULT hr = getRawInterface()->SetNoiseReduction(NoiseReduction);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetNoiseReduction");
    }

    void DevelopRaw::setExposureCompensation(double ev)
    {
      HRESULT hr = getRawInterface()->SetExposureCompensation(ev);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetExposureCompensation");
    }

    void DevelopRaw::setTint(double Tint)
    {
      HRESULT hr = getRawInterface()->SetTint(Tint);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetTint");
    }

    void DevelopRaw::setSharpness(double Sharpness)
    {
      HRESULT hr = getRawInterface()->SetSharpness(Sharpness);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetSharpness");
    }

    WICRawRenderMode DevelopRaw::getRenderMode()
    {
      WICRawRenderMode pRenderMode = WICRawRenderMode();
      HRESULT hr = getRawInterface()->GetRenderMode(&pRenderMode);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetRenderMode");
      return pRenderMode;
    }

    void DevelopRaw::setRotation(double Rotation)
    {
      HRESULT hr = getRawInterface()->SetRotation(Rotation);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetRotation");
    }

    void DevelopRaw::getToneCurve(unsigned int cbToneCurveBufferSize, WICRawToneCurve* pToneCurve, unsigned int* pcbActualToneCurveBufferSize)
    {
      HRESULT hr = getRawInterface()->GetToneCurve(cbToneCurveBufferSize, pToneCurve, pcbActualToneCurveBufferSize);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetToneCurve");
    }

    IPropertyBag2* DevelopRaw::getCurrentParameterSet()
    {
      IPropertyBag2* ppCurrentParameterSet = nullptr;
      HRESULT hr = getRawInterface()->GetCurrentParameterSet(&ppCurrentParameterSet);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetCurrentParameterSet");
      return ppCurrentParameterSet;
    }

    unsigned int DevelopRaw::getWhitePointKelvin()
    {
      unsigned int pWhitePointKelvin = unsigned int();
      HRESULT hr = getRawInterface()->GetWhitePointKelvin(&pWhitePointKelvin);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetWhitePointKelvin");
      return pWhitePointKelvin;
    }

    double DevelopRaw::getSaturation()
    {
      double pSaturation = double();
      HRESULT hr = getRawInterface()->GetSaturation(&pSaturation);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetSaturation");
      return pSaturation;
    }

    void DevelopRaw::setToneCurve()
    {
      HRESULT hr = getRawInterface()->SetToneCurve(0, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetToneCurve");
    }

    void DevelopRaw::queryRawCapabilitiesInfo(WICRawCapabilitiesInfo* pInfo)
    {
      HRESULT hr = getRawInterface()->QueryRawCapabilitiesInfo(pInfo);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::QueryRawCapabilitiesInfo");
    }

    double DevelopRaw::getNoiseReduction()
    {
      double pNoiseReduction = double();
      HRESULT hr = getRawInterface()->GetNoiseReduction(&pNoiseReduction);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetNoiseReduction");
      return pNoiseReduction;
    }

    double DevelopRaw::getExposureCompensation()
    {
      double pEV = double();
      HRESULT hr = getRawInterface()->GetExposureCompensation(&pEV);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetExposureCompensation");
      return pEV;
    }

    std::tuple<unsigned int, unsigned int, unsigned int> DevelopRaw::getWhitePointRGB()
    {
      unsigned int pRed = unsigned int();
      unsigned int pGreen = unsigned int();
      unsigned int pBlue = unsigned int();
      HRESULT hr = getRawInterface()->GetWhitePointRGB(&pRed, &pGreen, &pBlue);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetWhitePointRGB");
      return std::make_tuple(std::move(pRed), std::move(pGreen), std::move(pBlue));
    }

    void DevelopRaw::setDestinationColorContext()
    {
      HRESULT hr = getRawInterface()->SetDestinationColorContext(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetDestinationColorContext");
    }

    void DevelopRaw::setDestinationColorContext(WIC::ColorContext& pColorContext)
    {
      HRESULT hr = getRawInterface()->SetDestinationColorContext(pColorContext.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetDestinationColorContext");
    }

    void DevelopRaw::loadParameterSet(WICRawParameterSet ParameterSet)
    {
      HRESULT hr = getRawInterface()->LoadParameterSet(ParameterSet);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::LoadParameterSet");
    }

    double DevelopRaw::getGamma()
    {
      double pGamma = double();
      HRESULT hr = getRawInterface()->GetGamma(&pGamma);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetGamma");
      return pGamma;
    }

    void DevelopRaw::setWhitePointRGB(unsigned int Red, unsigned int Green, unsigned int Blue)
    {
      HRESULT hr = getRawInterface()->SetWhitePointRGB(Red, Green, Blue);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetWhitePointRGB");
    }

    void DevelopRaw::setNamedWhitePoint(WICNamedWhitePoint WhitePoint)
    {
      HRESULT hr = getRawInterface()->SetNamedWhitePoint(WhitePoint);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetNamedWhitePoint");
    }

    void DevelopRaw::setSaturation(double Saturation)
    {
      HRESULT hr = getRawInterface()->SetSaturation(Saturation);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetSaturation");
    }

    void DevelopRaw::setNotificationCallback()
    {
      HRESULT hr = getRawInterface()->SetNotificationCallback(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetNotificationCallback");
    }

    void DevelopRaw::setNotificationCallback(WIC::DevelopRawNotificationCallback& pCallback)
    {
      HRESULT hr = getRawInterface()->SetNotificationCallback(pCallback.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetNotificationCallback");
    }

    double DevelopRaw::getTint()
    {
      double pTint = double();
      HRESULT hr = getRawInterface()->GetTint(&pTint);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetTint");
      return pTint;
    }

    double DevelopRaw::getSharpness()
    {
      double pSharpness = double();
      HRESULT hr = getRawInterface()->GetSharpness(&pSharpness);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::GetSharpness");
      return pSharpness;
    }

    void DevelopRaw::setRenderMode(WICRawRenderMode RenderMode)
    {
      HRESULT hr = getRawInterface()->SetRenderMode(RenderMode);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetRenderMode");
    }

    void DevelopRaw::setContrast(double Contrast)
    {
      HRESULT hr = getRawInterface()->SetContrast(Contrast);
      if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetContrast");
    }

    void BitmapClipper::initialize(const WICRect& prc)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, &prc);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapClipper::Initialize");
    }

    void BitmapClipper::initialize(WIC::BitmapSource& pISource, const WICRect& prc)
    {
      HRESULT hr = getRawInterface()->Initialize(pISource.getRawInterface(), &prc);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapClipper::Initialize");
    }

    void BitmapFlipRotator::initialize(WICBitmapTransformOptions options)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, options);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFlipRotator::Initialize");
    }

    void BitmapFlipRotator::initialize(WIC::BitmapSource& pISource, WICBitmapTransformOptions options)
    {
      HRESULT hr = getRawInterface()->Initialize(pISource.getRawInterface(), options);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapFlipRotator::Initialize");
    }

    bool FormatConverter::canConvert(REFWICPixelFormatGUID srcPixelFormat, REFWICPixelFormatGUID dstPixelFormat)
    {
      BOOL pfCanConvert = BOOL();
      HRESULT hr = getRawInterface()->CanConvert(srcPixelFormat, dstPixelFormat, &pfCanConvert);
      if(FAILED(hr)) throw COMException(hr, "IWICFormatConverter::CanConvert");
      return pfCanConvert != FALSE;
    }

    void FormatConverter::initialize(REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, dstFormat, dither, nullptr, alphaThresholdPercent, paletteTranslate);
      if(FAILED(hr)) throw COMException(hr, "IWICFormatConverter::Initialize");
    }

    void FormatConverter::initialize(WIC::BitmapSource& pISource, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate)
    {
      HRESULT hr = getRawInterface()->Initialize(pISource.getRawInterface(), dstFormat, dither, nullptr, alphaThresholdPercent, paletteTranslate);
      if(FAILED(hr)) throw COMException(hr, "IWICFormatConverter::Initialize");
    }

    void FormatConverter::initialize(WIC::BitmapSource& pISource, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, WIC::Palette& pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate)
    {
      HRESULT hr = getRawInterface()->Initialize(pISource.getRawInterface(), dstFormat, dither, pIPalette.getRawInterface(), alphaThresholdPercent, paletteTranslate);
      if(FAILED(hr)) throw COMException(hr, "IWICFormatConverter::Initialize");
    }

    void ColorTransform::initialize(REFWICPixelFormatGUID pixelFmtDest)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, nullptr, nullptr, pixelFmtDest);
      if(FAILED(hr)) throw COMException(hr, "IWICColorTransform::Initialize");
    }

    void ColorTransform::initialize(WIC::BitmapSource& pIBitmapSource, REFWICPixelFormatGUID pixelFmtDest)
    {
      HRESULT hr = getRawInterface()->Initialize(pIBitmapSource.getRawInterface(), nullptr, nullptr, pixelFmtDest);
      if(FAILED(hr)) throw COMException(hr, "IWICColorTransform::Initialize");
    }

    void ColorTransform::initialize(WIC::BitmapSource& pIBitmapSource, WIC::ColorContext& pIContextSource, REFWICPixelFormatGUID pixelFmtDest)
    {
      HRESULT hr = getRawInterface()->Initialize(pIBitmapSource.getRawInterface(), pIContextSource.getRawInterface(), nullptr, pixelFmtDest);
      if(FAILED(hr)) throw COMException(hr, "IWICColorTransform::Initialize");
    }

    void ColorTransform::initialize(WIC::BitmapSource& pIBitmapSource, WIC::ColorContext& pIContextSource, WIC::ColorContext& pIContextDest, REFWICPixelFormatGUID pixelFmtDest)
    {
      HRESULT hr = getRawInterface()->Initialize(pIBitmapSource.getRawInterface(), pIContextSource.getRawInterface(), pIContextDest.getRawInterface(), pixelFmtDest);
      if(FAILED(hr)) throw COMException(hr, "IWICColorTransform::Initialize");
    }

    void Bitmap::setPalette()
    {
      HRESULT hr = getRawInterface()->SetPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmap::SetPalette");
    }

    void Bitmap::setPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->SetPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmap::SetPalette");
    }

    void Bitmap::setResolution(double dpiX, double dpiY)
    {
      HRESULT hr = getRawInterface()->SetResolution(dpiX, dpiY);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmap::SetResolution");
    }

    WIC::BitmapLock Bitmap::lock(DWORD flags)
    {
      IWICBitmapLock* ppILock = nullptr;
      HRESULT hr = getRawInterface()->Lock(nullptr, flags, &ppILock);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmap::Lock");
      return WIC::BitmapLock(ppILock);
    }

    WIC::BitmapLock Bitmap::lock(const WICRect& prcLock, DWORD flags)
    {
      IWICBitmapLock* ppILock = nullptr;
      HRESULT hr = getRawInterface()->Lock(&prcLock, flags, &ppILock);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmap::Lock");
      return WIC::BitmapLock(ppILock);
    }

    void BitmapScaler::initialize(unsigned int uiWidth, unsigned int uiHeight, WICBitmapInterpolationMode mode)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, uiWidth, uiHeight, mode);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapScaler::Initialize");
    }

    void BitmapScaler::initialize(WIC::BitmapSource& pISource, unsigned int uiWidth, unsigned int uiHeight, WICBitmapInterpolationMode mode)
    {
      HRESULT hr = getRawInterface()->Initialize(pISource.getRawInterface(), uiWidth, uiHeight, mode);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapScaler::Initialize");
    }

    WIC::MetadataQueryWriter BitmapEncoder::getMetadataQueryWriter()
    {
      IWICMetadataQueryWriter* ppIMetadataQueryWriter = nullptr;
      HRESULT hr = getRawInterface()->GetMetadataQueryWriter(&ppIMetadataQueryWriter);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::GetMetadataQueryWriter");
      return WIC::MetadataQueryWriter(ppIMetadataQueryWriter);
    }

    void BitmapEncoder::setPalette()
    {
      HRESULT hr = getRawInterface()->SetPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetPalette");
    }

    void BitmapEncoder::setPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->SetPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetPalette");
    }

    WIC::BitmapEncoderInfo BitmapEncoder::getEncoderInfo()
    {
      IWICBitmapEncoderInfo* ppIEncoderInfo = nullptr;
      HRESULT hr = getRawInterface()->GetEncoderInfo(&ppIEncoderInfo);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::GetEncoderInfo");
      return WIC::BitmapEncoderInfo(ppIEncoderInfo);
    }

    void BitmapEncoder::commit()
    {
      HRESULT hr = getRawInterface()->Commit();
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::Commit");
    }

    GUID BitmapEncoder::getContainerFormat()
    {
      GUID pguidContainerFormat = GUID();
      HRESULT hr = getRawInterface()->GetContainerFormat(&pguidContainerFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::GetContainerFormat");
      return pguidContainerFormat;
    }

    void BitmapEncoder::initialize(WICBitmapEncoderCacheOption cacheOption)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, cacheOption);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::Initialize");
    }

    void BitmapEncoder::initialize(COMStream& pIStream, WICBitmapEncoderCacheOption cacheOption)
    {
      HRESULT hr = getRawInterface()->Initialize(pIStream.getRawInterface(), cacheOption);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::Initialize");
    }

    WIC::BitmapFrameEncode BitmapEncoder::createNewFrame(IPropertyBag2** ppIEncoderOptions)
    {
      IWICBitmapFrameEncode* ppIFrameEncode = nullptr;
      HRESULT hr = getRawInterface()->CreateNewFrame(&ppIFrameEncode, ppIEncoderOptions);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::CreateNewFrame");
      return WIC::BitmapFrameEncode(ppIFrameEncode);
    }

    void BitmapEncoder::setPreview()
    {
      HRESULT hr = getRawInterface()->SetPreview(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetPreview");
    }

    void BitmapEncoder::setPreview(WIC::BitmapSource& pIPreview)
    {
      HRESULT hr = getRawInterface()->SetPreview(pIPreview.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetPreview");
    }

    void BitmapEncoder::setThumbnail()
    {
      HRESULT hr = getRawInterface()->SetThumbnail(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetThumbnail");
    }

    void BitmapEncoder::setThumbnail(WIC::BitmapSource& pIThumbnail)
    {
      HRESULT hr = getRawInterface()->SetThumbnail(pIThumbnail.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetThumbnail");
    }

    void BitmapDecoder::copyPalette()
    {
      HRESULT hr = getRawInterface()->CopyPalette(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::CopyPalette");
    }

    void BitmapDecoder::copyPalette(WIC::Palette& pIPalette)
    {
      HRESULT hr = getRawInterface()->CopyPalette(pIPalette.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::CopyPalette");
    }

    WIC::BitmapSource BitmapDecoder::getPreview()
    {
      IWICBitmapSource* ppIBitmapSource = nullptr;
      HRESULT hr = getRawInterface()->GetPreview(&ppIBitmapSource);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetPreview");
      return WIC::BitmapSource(ppIBitmapSource);
    }

    WIC::BitmapFrameDecode BitmapDecoder::getFrame(unsigned int index)
    {
      IWICBitmapFrameDecode* ppIBitmapFrame = nullptr;
      HRESULT hr = getRawInterface()->GetFrame(index, &ppIBitmapFrame);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetFrame");
      return WIC::BitmapFrameDecode(ppIBitmapFrame);
    }

    unsigned int BitmapDecoder::getFrameCount()
    {
      unsigned int pCount = unsigned int();
      HRESULT hr = getRawInterface()->GetFrameCount(&pCount);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetFrameCount");
      return pCount;
    }

    WIC::BitmapDecoderInfo BitmapDecoder::getDecoderInfo()
    {
      IWICBitmapDecoderInfo* ppIDecoderInfo = nullptr;
      HRESULT hr = getRawInterface()->GetDecoderInfo(&ppIDecoderInfo);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetDecoderInfo");
      return WIC::BitmapDecoderInfo(ppIDecoderInfo);
    }

    GUID BitmapDecoder::getContainerFormat()
    {
      GUID pguidContainerFormat = GUID();
      HRESULT hr = getRawInterface()->GetContainerFormat(&pguidContainerFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetContainerFormat");
      return pguidContainerFormat;
    }

    void BitmapDecoder::initialize(WICDecodeOptions cacheOptions)
    {
      HRESULT hr = getRawInterface()->Initialize(nullptr, cacheOptions);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::Initialize");
    }

    void BitmapDecoder::initialize(COMStream& pIStream, WICDecodeOptions cacheOptions)
    {
      HRESULT hr = getRawInterface()->Initialize(pIStream.getRawInterface(), cacheOptions);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::Initialize");
    }

    WIC::BitmapSource BitmapDecoder::getThumbnail()
    {
      IWICBitmapSource* ppIThumbnail = nullptr;
      HRESULT hr = getRawInterface()->GetThumbnail(&ppIThumbnail);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetThumbnail");
      return WIC::BitmapSource(ppIThumbnail);
    }

    DWORD BitmapDecoder::queryCapability()
    {
      DWORD pdwCapability = DWORD();
      HRESULT hr = getRawInterface()->QueryCapability(nullptr, &pdwCapability);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::QueryCapability");
      return pdwCapability;
    }

    DWORD BitmapDecoder::queryCapability(COMStream& pIStream)
    {
      DWORD pdwCapability = DWORD();
      HRESULT hr = getRawInterface()->QueryCapability(pIStream.getRawInterface(), &pdwCapability);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::QueryCapability");
      return pdwCapability;
    }

    WIC::MetadataQueryReader BitmapDecoder::getMetadataQueryReader()
    {
      IWICMetadataQueryReader* ppIMetadataQueryReader = nullptr;
      HRESULT hr = getRawInterface()->GetMetadataQueryReader(&ppIMetadataQueryReader);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetMetadataQueryReader");
      return WIC::MetadataQueryReader(ppIMetadataQueryReader);
    }

    void ColorContext::initializeFromExifColorSpace(unsigned int value)
    {
      HRESULT hr = getRawInterface()->InitializeFromExifColorSpace(value);
      if(FAILED(hr)) throw COMException(hr, "IWICColorContext::InitializeFromExifColorSpace");
    }

    WICColorContextType ColorContext::getType()
    {
      WICColorContextType pType = WICColorContextType();
      HRESULT hr = getRawInterface()->GetType(&pType);
      if(FAILED(hr)) throw COMException(hr, "IWICColorContext::GetType");
      return pType;
    }

    void ColorContext::initializeFromFilename(LPCWSTR wzFilename)
    {
      HRESULT hr = getRawInterface()->InitializeFromFilename(wzFilename);
      if(FAILED(hr)) throw COMException(hr, "IWICColorContext::InitializeFromFilename");
    }

    unsigned int ColorContext::getExifColorSpace()
    {
      unsigned int pValue = unsigned int();
      HRESULT hr = getRawInterface()->GetExifColorSpace(&pValue);
      if(FAILED(hr)) throw COMException(hr, "IWICColorContext::GetExifColorSpace");
      return pValue;
    }

    GUID ComponentInfo::getVendorGUID()
    {
      GUID pguidVendor = GUID();
      HRESULT hr = getRawInterface()->GetVendorGUID(&pguidVendor);
      if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetVendorGUID");
      return pguidVendor;
    }

    CLSID ComponentInfo::getCLSID()
    {
      CLSID pclsid = CLSID();
      HRESULT hr = getRawInterface()->GetCLSID(&pclsid);
      if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetCLSID");
      return pclsid;
    }

    WICComponentType ComponentInfo::getComponentType()
    {
      WICComponentType pType = WICComponentType();
      HRESULT hr = getRawInterface()->GetComponentType(&pType);
      if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetComponentType");
      return pType;
    }

    DWORD ComponentInfo::getSigningStatus()
    {
      DWORD pStatus = DWORD();
      HRESULT hr = getRawInterface()->GetSigningStatus(&pStatus);
      if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetSigningStatus");
      return pStatus;
    }

    WIC::FormatConverter FormatConverterInfo::createInstance()
    {
      IWICFormatConverter* ppIConverter = nullptr;
      HRESULT hr = getRawInterface()->CreateInstance(&ppIConverter);
      if(FAILED(hr)) throw COMException(hr, "IWICFormatConverterInfo::CreateInstance");
      return WIC::FormatConverter(ppIConverter);
    }

    unsigned int PixelFormatInfo::getChannelCount()
    {
      unsigned int puiChannelCount = unsigned int();
      HRESULT hr = getRawInterface()->GetChannelCount(&puiChannelCount);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo::GetChannelCount");
      return puiChannelCount;
    }

    unsigned int PixelFormatInfo::getBitsPerPixel()
    {
      unsigned int puiBitsPerPixel = unsigned int();
      HRESULT hr = getRawInterface()->GetBitsPerPixel(&puiBitsPerPixel);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo::GetBitsPerPixel");
      return puiBitsPerPixel;
    }

    WIC::ColorContext PixelFormatInfo::getColorContext()
    {
      IWICColorContext* ppIColorContext = nullptr;
      HRESULT hr = getRawInterface()->GetColorContext(&ppIColorContext);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo::GetColorContext");
      return WIC::ColorContext(ppIColorContext);
    }

    GUID PixelFormatInfo::getFormatGUID()
    {
      GUID pFormat = GUID();
      HRESULT hr = getRawInterface()->GetFormatGUID(&pFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo::GetFormatGUID");
      return pFormat;
    }

    bool PixelFormatInfo2::supportsTransparency()
    {
      BOOL pfSupportsTransparency = BOOL();
      HRESULT hr = getRawInterface()->SupportsTransparency(&pfSupportsTransparency);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo2::SupportsTransparency");
      return pfSupportsTransparency != FALSE;
    }

    WICPixelFormatNumericRepresentation PixelFormatInfo2::getNumericRepresentation()
    {
      WICPixelFormatNumericRepresentation pNumericRepresentation = WICPixelFormatNumericRepresentation();
      HRESULT hr = getRawInterface()->GetNumericRepresentation(&pNumericRepresentation);
      if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo2::GetNumericRepresentation");
      return pNumericRepresentation;
    }

    bool BitmapCodecInfo::doesSupportLossless()
    {
      BOOL pfSupportLossless = BOOL();
      HRESULT hr = getRawInterface()->DoesSupportLossless(&pfSupportLossless);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::DoesSupportLossless");
      return pfSupportLossless != FALSE;
    }

    bool BitmapCodecInfo::doesSupportMultiframe()
    {
      BOOL pfSupportMultiframe = BOOL();
      HRESULT hr = getRawInterface()->DoesSupportMultiframe(&pfSupportMultiframe);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::DoesSupportMultiframe");
      return pfSupportMultiframe != FALSE;
    }

    bool BitmapCodecInfo::matchesMimeType(LPCWSTR wzMimeType)
    {
      BOOL pfMatches = BOOL();
      HRESULT hr = getRawInterface()->MatchesMimeType(wzMimeType, &pfMatches);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::MatchesMimeType");
      return pfMatches != FALSE;
    }

    bool BitmapCodecInfo::doesSupportChromakey()
    {
      BOOL pfSupportChromakey = BOOL();
      HRESULT hr = getRawInterface()->DoesSupportChromakey(&pfSupportChromakey);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::DoesSupportChromakey");
      return pfSupportChromakey != FALSE;
    }

    GUID BitmapCodecInfo::getContainerFormat()
    {
      GUID pguidContainerFormat = GUID();
      HRESULT hr = getRawInterface()->GetContainerFormat(&pguidContainerFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetContainerFormat");
      return pguidContainerFormat;
    }

    bool BitmapCodecInfo::doesSupportAnimation()
    {
      BOOL pfSupportAnimation = BOOL();
      HRESULT hr = getRawInterface()->DoesSupportAnimation(&pfSupportAnimation);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::DoesSupportAnimation");
      return pfSupportAnimation != FALSE;
    }

    WIC::BitmapEncoder BitmapEncoderInfo::createInstance()
    {
      IWICBitmapEncoder* ppIBitmapEncoder = nullptr;
      HRESULT hr = getRawInterface()->CreateInstance(&ppIBitmapEncoder);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoderInfo::CreateInstance");
      return WIC::BitmapEncoder(ppIBitmapEncoder);
    }

    void BitmapDecoderInfo::getPatterns(unsigned int cbSizePatterns, WICBitmapPattern* pPatterns, unsigned int* pcPatterns, unsigned int* pcbPatternsActual)
    {
      HRESULT hr = getRawInterface()->GetPatterns(cbSizePatterns, pPatterns, pcPatterns, pcbPatternsActual);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoderInfo::GetPatterns");
    }

    WIC::BitmapDecoder BitmapDecoderInfo::createInstance()
    {
      IWICBitmapDecoder* ppIBitmapDecoder = nullptr;
      HRESULT hr = getRawInterface()->CreateInstance(&ppIBitmapDecoder);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoderInfo::CreateInstance");
      return WIC::BitmapDecoder(ppIBitmapDecoder);
    }

    bool BitmapDecoderInfo::matchesPattern()
    {
      BOOL pfMatches = BOOL();
      HRESULT hr = getRawInterface()->MatchesPattern(nullptr, &pfMatches);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoderInfo::MatchesPattern");
      return pfMatches != FALSE;
    }

    bool BitmapDecoderInfo::matchesPattern(COMStream& pIStream)
    {
      BOOL pfMatches = BOOL();
      HRESULT hr = getRawInterface()->MatchesPattern(pIStream.getRawInterface(), &pfMatches);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoderInfo::MatchesPattern");
      return pfMatches != FALSE;
    }

    void BitmapSourceTransform::getClosestSize(unsigned int* puiWidth, unsigned int* puiHeight)
    {
      HRESULT hr = getRawInterface()->GetClosestSize(puiWidth, puiHeight);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::GetClosestSize");
    }

    void BitmapSourceTransform::getClosestPixelFormat(WICPixelFormatGUID* pguidDstFormat)
    {
      HRESULT hr = getRawInterface()->GetClosestPixelFormat(pguidDstFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::GetClosestPixelFormat");
    }

    bool BitmapSourceTransform::doesSupportTransform(WICBitmapTransformOptions dstTransform)
    {
      BOOL pfIsSupported = BOOL();
      HRESULT hr = getRawInterface()->DoesSupportTransform(dstTransform, &pfIsSupported);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::DoesSupportTransform");
      return pfIsSupported != FALSE;
    }

    BYTE BitmapSourceTransform::copyPixels(unsigned int uiWidth, unsigned int uiHeight, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize)
    {
      BYTE pbBuffer = BYTE();
      HRESULT hr = getRawInterface()->CopyPixels(nullptr, uiWidth, uiHeight, nullptr, dstTransform, nStride, cbBufferSize, &pbBuffer);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::CopyPixels");
      return pbBuffer;
    }

    BYTE BitmapSourceTransform::copyPixels(const WICRect& prc, unsigned int uiWidth, unsigned int uiHeight, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize)
    {
      BYTE pbBuffer = BYTE();
      HRESULT hr = getRawInterface()->CopyPixels(&prc, uiWidth, uiHeight, nullptr, dstTransform, nStride, cbBufferSize, &pbBuffer);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::CopyPixels");
      return pbBuffer;
    }

    BYTE BitmapSourceTransform::copyPixels(const WICRect& prc, unsigned int uiWidth, unsigned int uiHeight, WICPixelFormatGUID* pguidDstFormat, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize)
    {
      BYTE pbBuffer = BYTE();
      HRESULT hr = getRawInterface()->CopyPixels(&prc, uiWidth, uiHeight, pguidDstFormat, dstTransform, nStride, cbBufferSize, &pbBuffer);
      if(FAILED(hr)) throw COMException(hr, "IWICBitmapSourceTransform::CopyPixels");
      return pbBuffer;
    }

    IEnumString* MetadataQueryReader::getEnumerator()
    {
      IEnumString* ppIEnumString = nullptr;
      HRESULT hr = getRawInterface()->GetEnumerator(&ppIEnumString);
      if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryReader::GetEnumerator");
      return ppIEnumString;
    }

    GUID MetadataQueryReader::getContainerFormat()
    {
      GUID pguidContainerFormat = GUID();
      HRESULT hr = getRawInterface()->GetContainerFormat(&pguidContainerFormat);
      if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryReader::GetContainerFormat");
      return pguidContainerFormat;
    }

    void MetadataQueryReader::getMetadataByName(LPCWSTR wzName, PROPVARIANT* pvarValue)
    {
      HRESULT hr = getRawInterface()->GetMetadataByName(wzName, pvarValue);
      if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryReader::GetMetadataByName");
    }

    void MetadataQueryWriter::removeMetadataByName(LPCWSTR wzName)
    {
      HRESULT hr = getRawInterface()->RemoveMetadataByName(wzName);
      if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryWriter::RemoveMetadataByName");
    }

    void MetadataQueryWriter::setMetadataByName(LPCWSTR wzName, const PROPVARIANT& pvarValue)
    {
      HRESULT hr = getRawInterface()->SetMetadataByName(wzName, &pvarValue);
      if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryWriter::SetMetadataByName");
    }

    void ProgressCallback::notify(ULONG uFrameNum, WICProgressOperation operation, double dblProgress)
    {
      HRESULT hr = getRawInterface()->Notify(uFrameNum, operation, dblProgress);
      if(FAILED(hr)) throw COMException(hr, "IWICProgressCallback::Notify");
    }

  }
}
