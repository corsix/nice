// Autogenerated by nicify.lua -- do not edit by hand.
#include <nice/dxgi.h>
namespace C6
{
  namespace DXGI
  {
    void Object::setPrivateData(REFGUID Name, unsigned int DataSize, const void* pData)
    {
      HRESULT hr = getRawInterface()->SetPrivateData(Name, DataSize, pData);
      if(FAILED(hr)) throw COMException(hr, "IDXGIObject::SetPrivateData");
    }

    void Object::getParent(REFIID riid, void** ppParent)
    {
      HRESULT hr = getRawInterface()->GetParent(riid, ppParent);
      if(FAILED(hr)) throw COMException(hr, "IDXGIObject::GetParent");
    }

    void Object::getPrivateData(REFGUID Name, unsigned int* pDataSize, void* pData)
    {
      HRESULT hr = getRawInterface()->GetPrivateData(Name, pDataSize, pData);
      if(FAILED(hr)) throw COMException(hr, "IDXGIObject::GetPrivateData");
    }

    void Object::setPrivateDataInterface(REFGUID Name, const IUnknown& pUnknown)
    {
      HRESULT hr = getRawInterface()->SetPrivateDataInterface(Name, &pUnknown);
      if(FAILED(hr)) throw COMException(hr, "IDXGIObject::SetPrivateDataInterface");
    }

    DXGI_ADAPTER_DESC Adapter::getDesc()
    {
      DXGI_ADAPTER_DESC pDesc = DXGI_ADAPTER_DESC();
      HRESULT hr = getRawInterface()->GetDesc(&pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGIAdapter::GetDesc");
      return pDesc;
    }

    LARGE_INTEGER Adapter::checkInterfaceSupport(REFGUID InterfaceName)
    {
      LARGE_INTEGER pUMDVersion = LARGE_INTEGER();
      HRESULT hr = getRawInterface()->CheckInterfaceSupport(InterfaceName, &pUMDVersion);
      if(FAILED(hr)) throw COMException(hr, "IDXGIAdapter::CheckInterfaceSupport");
      return pUMDVersion;
    }

    void Adapter::enumOutputs(unsigned int Output, IDXGIOutput** ppOutput)
    {
      HRESULT hr = getRawInterface()->EnumOutputs(Output, ppOutput);
      if(FAILED(hr)) throw COMException(hr, "IDXGIAdapter::EnumOutputs");
    }

    DXGI_ADAPTER_DESC1 Adapter1::getDesc1()
    {
      DXGI_ADAPTER_DESC1 pDesc = DXGI_ADAPTER_DESC1();
      HRESULT hr = getRawInterface()->GetDesc1(&pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGIAdapter1::GetDesc1");
      return pDesc;
    }

    void Output::releaseOwnership()
    {
      getRawInterface()->ReleaseOwnership();
    }

    DXGI_FRAME_STATISTICS Output::getFrameStatistics()
    {
      DXGI_FRAME_STATISTICS pStats = DXGI_FRAME_STATISTICS();
      HRESULT hr = getRawInterface()->GetFrameStatistics(&pStats);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetFrameStatistics");
      return pStats;
    }

    void Output::takeOwnership(COMObject& pDevice, BOOL Exclusive)
    {
      HRESULT hr = getRawInterface()->TakeOwnership(pDevice.getRawInterface(), Exclusive);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::TakeOwnership");
    }

    DXGI_MODE_DESC Output::getDisplayModeList(DXGI_FORMAT EnumFormat, unsigned int Flags, unsigned int* pNumModes)
    {
      DXGI_MODE_DESC pDesc = DXGI_MODE_DESC();
      HRESULT hr = getRawInterface()->GetDisplayModeList(EnumFormat, Flags, pNumModes, &pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetDisplayModeList");
      return pDesc;
    }

    void Output::getDisplaySurfaceData(DXGI::Surface& pDestination)
    {
      HRESULT hr = getRawInterface()->GetDisplaySurfaceData(pDestination.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetDisplaySurfaceData");
    }

    DXGI_MODE_DESC Output::findClosestMatchingMode(const DXGI_MODE_DESC& pModeToMatch, COMObject& pConcernedDevice)
    {
      DXGI_MODE_DESC pClosestMatch = DXGI_MODE_DESC();
      HRESULT hr = getRawInterface()->FindClosestMatchingMode(&pModeToMatch, &pClosestMatch, pConcernedDevice.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::FindClosestMatchingMode");
      return pClosestMatch;
    }

    void Output::setGammaControl(const DXGI_GAMMA_CONTROL& pArray)
    {
      HRESULT hr = getRawInterface()->SetGammaControl(&pArray);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::SetGammaControl");
    }

    void Output::setDisplaySurface(DXGI::Surface& pScanoutSurface)
    {
      HRESULT hr = getRawInterface()->SetDisplaySurface(pScanoutSurface.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::SetDisplaySurface");
    }

    DXGI_GAMMA_CONTROL_CAPABILITIES Output::getGammaControlCapabilities()
    {
      DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps = DXGI_GAMMA_CONTROL_CAPABILITIES();
      HRESULT hr = getRawInterface()->GetGammaControlCapabilities(&pGammaCaps);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetGammaControlCapabilities");
      return pGammaCaps;
    }

    DXGI_GAMMA_CONTROL Output::getGammaControl()
    {
      DXGI_GAMMA_CONTROL pArray = DXGI_GAMMA_CONTROL();
      HRESULT hr = getRawInterface()->GetGammaControl(&pArray);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetGammaControl");
      return pArray;
    }

    void Output::waitForVBlank()
    {
      HRESULT hr = getRawInterface()->WaitForVBlank();
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::WaitForVBlank");
    }

    DXGI_OUTPUT_DESC Output::getDesc()
    {
      DXGI_OUTPUT_DESC pDesc = DXGI_OUTPUT_DESC();
      HRESULT hr = getRawInterface()->GetDesc(&pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGIOutput::GetDesc");
      return pDesc;
    }

    void DeviceSubObject::getDevice(REFIID riid, void** ppDevice)
    {
      HRESULT hr = getRawInterface()->GetDevice(riid, ppDevice);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDeviceSubObject::GetDevice");
    }

    void KeyedMutex::acquireSync(uint64_t Key, DWORD dwMilliseconds)
    {
      HRESULT hr = getRawInterface()->AcquireSync(Key, dwMilliseconds);
      if(FAILED(hr)) throw COMException(hr, "IDXGIKeyedMutex::AcquireSync");
    }

    void KeyedMutex::releaseSync(uint64_t Key)
    {
      HRESULT hr = getRawInterface()->ReleaseSync(Key);
      if(FAILED(hr)) throw COMException(hr, "IDXGIKeyedMutex::ReleaseSync");
    }

    DXGI_USAGE Resource::getUsage()
    {
      DXGI_USAGE pUsage = DXGI_USAGE();
      HRESULT hr = getRawInterface()->GetUsage(&pUsage);
      if(FAILED(hr)) throw COMException(hr, "IDXGIResource::GetUsage");
      return pUsage;
    }

    HANDLE Resource::getSharedHandle()
    {
      HANDLE pSharedHandle = HANDLE();
      HRESULT hr = getRawInterface()->GetSharedHandle(&pSharedHandle);
      if(FAILED(hr)) throw COMException(hr, "IDXGIResource::GetSharedHandle");
      return pSharedHandle;
    }

    void Resource::setEvictionPriority(unsigned int EvictionPriority)
    {
      HRESULT hr = getRawInterface()->SetEvictionPriority(EvictionPriority);
      if(FAILED(hr)) throw COMException(hr, "IDXGIResource::SetEvictionPriority");
    }

    void Resource::getEvictionPriority(unsigned int* pEvictionPriority)
    {
      HRESULT hr = getRawInterface()->GetEvictionPriority(pEvictionPriority);
      if(FAILED(hr)) throw COMException(hr, "IDXGIResource::GetEvictionPriority");
    }

    DXGI_MAPPED_RECT Surface::map(unsigned int MapFlags)
    {
      DXGI_MAPPED_RECT pLockedRect = DXGI_MAPPED_RECT();
      HRESULT hr = getRawInterface()->Map(&pLockedRect, MapFlags);
      if(FAILED(hr)) throw COMException(hr, "IDXGISurface::Map");
      return pLockedRect;
    }

    void Surface::unmap()
    {
      HRESULT hr = getRawInterface()->Unmap();
      if(FAILED(hr)) throw COMException(hr, "IDXGISurface::Unmap");
    }

    DXGI_SURFACE_DESC Surface::getDesc()
    {
      DXGI_SURFACE_DESC pDesc = DXGI_SURFACE_DESC();
      HRESULT hr = getRawInterface()->GetDesc(&pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGISurface::GetDesc");
      return pDesc;
    }

    HDC Surface1::getDC(BOOL Discard)
    {
      HDC phdc = HDC();
      HRESULT hr = getRawInterface()->GetDC(Discard, &phdc);
      if(FAILED(hr)) throw COMException(hr, "IDXGISurface1::GetDC");
      return phdc;
    }

    void Surface1::releaseDC(RECT* pDirtyRect)
    {
      HRESULT hr = getRawInterface()->ReleaseDC(pDirtyRect);
      if(FAILED(hr)) throw COMException(hr, "IDXGISurface1::ReleaseDC");
    }

    void SwapChain::resizeBuffers(unsigned int BufferCount, unsigned int Width, unsigned int Height, DXGI_FORMAT NewFormat, unsigned int SwapChainFlags)
    {
      HRESULT hr = getRawInterface()->ResizeBuffers(BufferCount, Width, Height, NewFormat, SwapChainFlags);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::ResizeBuffers");
    }

    DXGI_FRAME_STATISTICS SwapChain::getFrameStatistics()
    {
      DXGI_FRAME_STATISTICS pStats = DXGI_FRAME_STATISTICS();
      HRESULT hr = getRawInterface()->GetFrameStatistics(&pStats);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::GetFrameStatistics");
      return pStats;
    }

    std::tuple<bool, DXGI::Output> SwapChain::getFullscreenState()
    {
      BOOL pFullscreen = BOOL();
      IDXGIOutput* ppTarget = nullptr;
      HRESULT hr = getRawInterface()->GetFullscreenState(&pFullscreen, &ppTarget);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::GetFullscreenState");
      return std::make_tuple(std::move(pFullscreen != FALSE), std::move(DXGI::Output(ppTarget)));
    }

    DXGI_SWAP_CHAIN_DESC SwapChain::getDesc()
    {
      DXGI_SWAP_CHAIN_DESC pDesc = DXGI_SWAP_CHAIN_DESC();
      HRESULT hr = getRawInterface()->GetDesc(&pDesc);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::GetDesc");
      return pDesc;
    }

    void SwapChain::getContainingOutput(IDXGIOutput** ppOutput)
    {
      HRESULT hr = getRawInterface()->GetContainingOutput(ppOutput);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::GetContainingOutput");
    }

    unsigned int SwapChain::getLastPresentCount()
    {
      unsigned int pLastPresentCount = unsigned int();
      HRESULT hr = getRawInterface()->GetLastPresentCount(&pLastPresentCount);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::GetLastPresentCount");
      return pLastPresentCount;
    }

    void SwapChain::setFullscreenState(BOOL Fullscreen, DXGI::Output& pTarget)
    {
      HRESULT hr = getRawInterface()->SetFullscreenState(Fullscreen, pTarget.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::SetFullscreenState");
    }

    void SwapChain::present(unsigned int SyncInterval, unsigned int Flags)
    {
      HRESULT hr = getRawInterface()->Present(SyncInterval, Flags);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::Present");
    }

    void SwapChain::resizeTarget(const DXGI_MODE_DESC& pNewTargetParameters)
    {
      HRESULT hr = getRawInterface()->ResizeTarget(&pNewTargetParameters);
      if(FAILED(hr)) throw COMException(hr, "IDXGISwapChain::ResizeTarget");
    }

    DXGI::Adapter Device::getAdapter()
    {
      IDXGIAdapter* pAdapter = nullptr;
      HRESULT hr = getRawInterface()->GetAdapter(&pAdapter);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice::GetAdapter");
      return DXGI::Adapter(pAdapter);
    }

    void Device::queryResourceResidency(IUnknown* const& ppResources, DXGI_RESIDENCY* pResidencyStatus, unsigned int NumResources)
    {
      HRESULT hr = getRawInterface()->QueryResourceResidency(&ppResources, pResidencyStatus, NumResources);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice::QueryResourceResidency");
    }

    void Device::getGPUThreadPriority(int* pPriority)
    {
      HRESULT hr = getRawInterface()->GetGPUThreadPriority(pPriority);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice::GetGPUThreadPriority");
    }

    void Device::setGPUThreadPriority(int Priority)
    {
      HRESULT hr = getRawInterface()->SetGPUThreadPriority(Priority);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice::SetGPUThreadPriority");
    }

    DXGI::Surface Device::createSurface(const DXGI_SURFACE_DESC& pDesc, unsigned int NumSurfaces, DXGI_USAGE Usage, const DXGI_SHARED_RESOURCE& pSharedResource)
    {
      IDXGISurface* ppSurface = nullptr;
      HRESULT hr = getRawInterface()->CreateSurface(&pDesc, NumSurfaces, Usage, &pSharedResource, &ppSurface);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice::CreateSurface");
      return DXGI::Surface(ppSurface);
    }

    void Device1::setMaximumFrameLatency(unsigned int MaxLatency)
    {
      HRESULT hr = getRawInterface()->SetMaximumFrameLatency(MaxLatency);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice1::SetMaximumFrameLatency");
    }

    unsigned int Device1::getMaximumFrameLatency()
    {
      unsigned int pMaxLatency = unsigned int();
      HRESULT hr = getRawInterface()->GetMaximumFrameLatency(&pMaxLatency);
      if(FAILED(hr)) throw COMException(hr, "IDXGIDevice1::GetMaximumFrameLatency");
      return pMaxLatency;
    }

    void Factory::makeWindowAssociation(HWND WindowHandle, unsigned int Flags)
    {
      HRESULT hr = getRawInterface()->MakeWindowAssociation(WindowHandle, Flags);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory::MakeWindowAssociation");
    }

    DXGI::Adapter Factory::enumAdapters(unsigned int Adapter)
    {
      IDXGIAdapter* ppAdapter = nullptr;
      HRESULT hr = getRawInterface()->EnumAdapters(Adapter, &ppAdapter);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory::EnumAdapters");
      return DXGI::Adapter(ppAdapter);
    }

    void Factory::getWindowAssociation(HWND* pWindowHandle)
    {
      HRESULT hr = getRawInterface()->GetWindowAssociation(pWindowHandle);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory::GetWindowAssociation");
    }

    DXGI::Adapter Factory::createSoftwareAdapter(HMODULE Module)
    {
      IDXGIAdapter* ppAdapter = nullptr;
      HRESULT hr = getRawInterface()->CreateSoftwareAdapter(Module, &ppAdapter);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory::CreateSoftwareAdapter");
      return DXGI::Adapter(ppAdapter);
    }

    DXGI::SwapChain Factory::createSwapChain(COMObject& pDevice, DXGI_SWAP_CHAIN_DESC* pDesc)
    {
      IDXGISwapChain* ppSwapChain = nullptr;
      HRESULT hr = getRawInterface()->CreateSwapChain(pDevice.getRawInterface(), pDesc, &ppSwapChain);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory::CreateSwapChain");
      return DXGI::SwapChain(ppSwapChain);
    }

    BOOL Factory1::isCurrent()
    {
      return getRawInterface()->IsCurrent();
    }

    DXGI::Adapter1 Factory1::enumAdapters1(unsigned int Adapter)
    {
      IDXGIAdapter1* ppAdapter = nullptr;
      HRESULT hr = getRawInterface()->EnumAdapters1(Adapter, &ppAdapter);
      if(FAILED(hr)) throw COMException(hr, "IDXGIFactory1::EnumAdapters1");
      return DXGI::Adapter1(ppAdapter);
    }

  }
}
