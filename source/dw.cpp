// Autogenerated by nicify.lua -- do not edit by hand.
#include <nice/dw.h>
namespace C6
{
  namespace DW
  {
    uint32_t LocalizedStrings::getLocaleNameLength(uint32_t index)
    {
      uint32_t length = uint32_t();
      HRESULT hr = getRawInterface()->GetLocaleNameLength(index, &length);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalizedStrings::GetLocaleNameLength");
      return length;
    }

    std::vector<wchar_t> LocalizedStrings::getString(uint32_t index, uint32_t size)
    {
      std::vector<wchar_t> stringBuffer(static_cast<size_t>(size));
      HRESULT hr = getRawInterface()->GetString(index, stringBuffer.data(), size);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalizedStrings::GetString");
      return stringBuffer;
    }

    uint32_t LocalizedStrings::getCount()
    {
      return getRawInterface()->GetCount();
    }

    uint32_t LocalizedStrings::getStringLength(uint32_t index)
    {
      uint32_t length = uint32_t();
      HRESULT hr = getRawInterface()->GetStringLength(index, &length);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalizedStrings::GetStringLength");
      return length;
    }

    std::tuple<uint32_t, bool> LocalizedStrings::findLocaleName(const wchar_t* localeName)
    {
      uint32_t index = uint32_t();
      BOOL exists = BOOL();
      HRESULT hr = getRawInterface()->FindLocaleName(localeName, &index, &exists);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalizedStrings::FindLocaleName");
      return std::make_tuple(std::move(index), std::move(exists != FALSE));
    }

    std::vector<wchar_t> LocalizedStrings::getLocaleName(uint32_t index, uint32_t size)
    {
      std::vector<wchar_t> localeName(static_cast<size_t>(size));
      HRESULT hr = getRawInterface()->GetLocaleName(index, localeName.data(), size);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalizedStrings::GetLocaleName");
      return localeName;
    }

    RECT GlyphRunAnalysis::getAlphaTextureBounds(DWRITE_TEXTURE_TYPE textureType)
    {
      RECT textureBounds = RECT();
      HRESULT hr = getRawInterface()->GetAlphaTextureBounds(textureType, &textureBounds);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGlyphRunAnalysis::GetAlphaTextureBounds");
      return textureBounds;
    }

    void GlyphRunAnalysis::createAlphaTexture(DWRITE_TEXTURE_TYPE textureType, const RECT& textureBounds, BYTE* alphaValues, uint32_t bufferSize)
    {
      HRESULT hr = getRawInterface()->CreateAlphaTexture(textureType, &textureBounds, alphaValues, bufferSize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGlyphRunAnalysis::CreateAlphaTexture");
    }

    std::tuple<float, float, float> GlyphRunAnalysis::getAlphaBlendParams(DW::RenderingParams& renderingParams)
    {
      float blendGamma = float();
      float blendEnhancedContrast = float();
      float blendClearTypeLevel = float();
      HRESULT hr = getRawInterface()->GetAlphaBlendParams(renderingParams.getRawInterface(), &blendGamma, &blendEnhancedContrast, &blendClearTypeLevel);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGlyphRunAnalysis::GetAlphaBlendParams");
      return std::make_tuple(std::move(blendGamma), std::move(blendEnhancedContrast), std::move(blendClearTypeLevel));
    }

    void TextAnalyzer::analyzeScript(DW::TextAnalysisSource& analysisSource, uint32_t textPosition, uint32_t textLength, DW::TextAnalysisSink& analysisSink)
    {
      HRESULT hr = getRawInterface()->AnalyzeScript(analysisSource.getRawInterface(), textPosition, textLength, analysisSink.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalyzer::AnalyzeScript");
    }

    void TextAnalyzer::analyzeNumberSubstitution(DW::TextAnalysisSource& analysisSource, uint32_t textPosition, uint32_t textLength, DW::TextAnalysisSink& analysisSink)
    {
      HRESULT hr = getRawInterface()->AnalyzeNumberSubstitution(analysisSource.getRawInterface(), textPosition, textLength, analysisSink.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalyzer::AnalyzeNumberSubstitution");
    }

    void TextAnalyzer::analyzeBidi(DW::TextAnalysisSource& analysisSource, uint32_t textPosition, uint32_t textLength, DW::TextAnalysisSink& analysisSink)
    {
      HRESULT hr = getRawInterface()->AnalyzeBidi(analysisSource.getRawInterface(), textPosition, textLength, analysisSink.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalyzer::AnalyzeBidi");
    }

    void TextAnalyzer::analyzeLineBreakpoints(DW::TextAnalysisSource& analysisSource, uint32_t textPosition, uint32_t textLength, DW::TextAnalysisSink& analysisSink)
    {
      HRESULT hr = getRawInterface()->AnalyzeLineBreakpoints(analysisSource.getRawInterface(), textPosition, textLength, analysisSink.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalyzer::AnalyzeLineBreakpoints");
    }

    HDC BitmapRenderTarget::getMemoryDC()
    {
      return getRawInterface()->GetMemoryDC();
    }

    void BitmapRenderTarget::resize(uint32_t width, uint32_t height)
    {
      HRESULT hr = getRawInterface()->Resize(width, height);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::Resize");
    }

    float BitmapRenderTarget::getPixelsPerDip()
    {
      return getRawInterface()->GetPixelsPerDip();
    }

    RECT BitmapRenderTarget::drawGlyphRun(float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN& glyphRun, DW::RenderingParams& renderingParams, COLORREF textColor)
    {
      RECT blackBoxRect = RECT();
      HRESULT hr = getRawInterface()->DrawGlyphRun(baselineOriginX, baselineOriginY, measuringMode, &glyphRun, renderingParams.getRawInterface(), textColor, &blackBoxRect);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::DrawGlyphRun");
      return blackBoxRect;
    }

    SIZE BitmapRenderTarget::getSize()
    {
      SIZE size = SIZE();
      HRESULT hr = getRawInterface()->GetSize(&size);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::GetSize");
      return size;
    }

    void BitmapRenderTarget::setCurrentTransform()
    {
      HRESULT hr = getRawInterface()->SetCurrentTransform(nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::SetCurrentTransform");
    }

    void BitmapRenderTarget::setCurrentTransform(const DWRITE_MATRIX& transform)
    {
      HRESULT hr = getRawInterface()->SetCurrentTransform(&transform);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::SetCurrentTransform");
    }

    void BitmapRenderTarget::setPixelsPerDip(float pixelsPerDip)
    {
      HRESULT hr = getRawInterface()->SetPixelsPerDip(pixelsPerDip);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::SetPixelsPerDip");
    }

    DWRITE_MATRIX BitmapRenderTarget::getCurrentTransform()
    {
      DWRITE_MATRIX transform = DWRITE_MATRIX();
      HRESULT hr = getRawInterface()->GetCurrentTransform(&transform);
      if(FAILED(hr)) throw COMException(hr, "IDWriteBitmapRenderTarget::GetCurrentTransform");
      return transform;
    }

    void InlineObject::draw(DW::TextRenderer& renderer, float originX, float originY, BOOL isSideways, BOOL isRightToLeft)
    {
      HRESULT hr = getRawInterface()->Draw(nullptr, renderer.getRawInterface(), originX, originY, isSideways, isRightToLeft, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::Draw");
    }

    void InlineObject::draw(void* clientDrawingContext, DW::TextRenderer& renderer, float originX, float originY, BOOL isSideways, BOOL isRightToLeft)
    {
      HRESULT hr = getRawInterface()->Draw(clientDrawingContext, renderer.getRawInterface(), originX, originY, isSideways, isRightToLeft, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::Draw");
    }

    void InlineObject::draw(void* clientDrawingContext, DW::TextRenderer& renderer, float originX, float originY, BOOL isSideways, BOOL isRightToLeft, COMObject& clientDrawingEffect)
    {
      HRESULT hr = getRawInterface()->Draw(clientDrawingContext, renderer.getRawInterface(), originX, originY, isSideways, isRightToLeft, clientDrawingEffect.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::Draw");
    }

    std::tuple<DWRITE_BREAK_CONDITION, DWRITE_BREAK_CONDITION> InlineObject::getBreakConditions()
    {
      DWRITE_BREAK_CONDITION breakConditionBefore = DWRITE_BREAK_CONDITION();
      DWRITE_BREAK_CONDITION breakConditionAfter = DWRITE_BREAK_CONDITION();
      HRESULT hr = getRawInterface()->GetBreakConditions(&breakConditionBefore, &breakConditionAfter);
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::GetBreakConditions");
      return std::make_tuple(std::move(breakConditionBefore), std::move(breakConditionAfter));
    }

    DWRITE_OVERHANG_METRICS InlineObject::getOverhangMetrics()
    {
      DWRITE_OVERHANG_METRICS overhangs = DWRITE_OVERHANG_METRICS();
      HRESULT hr = getRawInterface()->GetOverhangMetrics(&overhangs);
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::GetOverhangMetrics");
      return overhangs;
    }

    DWRITE_INLINE_OBJECT_METRICS InlineObject::getMetrics()
    {
      DWRITE_INLINE_OBJECT_METRICS metrics = DWRITE_INLINE_OBJECT_METRICS();
      HRESULT hr = getRawInterface()->GetMetrics(&metrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteInlineObject::GetMetrics");
      return metrics;
    }

    DW::FontFile FontFileEnumerator::getCurrentFontFile()
    {
      IDWriteFontFile* fontFile = nullptr;
      HRESULT hr = getRawInterface()->GetCurrentFontFile(&fontFile);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileEnumerator::GetCurrentFontFile");
      return DW::FontFile(fontFile);
    }

    bool FontFileEnumerator::moveNext()
    {
      BOOL hasCurrentFile = BOOL();
      HRESULT hr = getRawInterface()->MoveNext(&hasCurrentFile);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileEnumerator::MoveNext");
      return hasCurrentFile != FALSE;
    }

    uint64_t FontFileStream::getLastWriteTime()
    {
      uint64_t lastWriteTime = uint64_t();
      HRESULT hr = getRawInterface()->GetLastWriteTime(&lastWriteTime);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileStream::GetLastWriteTime");
      return lastWriteTime;
    }

    void FontFileStream::releaseFileFragment(void* fragmentContext)
    {
      getRawInterface()->ReleaseFileFragment(fragmentContext);
    }

    void* FontFileStream::readFileFragment(const void** fragmentStart, uint64_t fileOffset, uint64_t fragmentSize)
    {
      void* fragmentContext = nullptr;
      HRESULT hr = getRawInterface()->ReadFileFragment(fragmentStart, fileOffset, fragmentSize, &fragmentContext);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileStream::ReadFileFragment");
      return fragmentContext;
    }

    uint64_t FontFileStream::getFileSize()
    {
      uint64_t fileSize = uint64_t();
      HRESULT hr = getRawInterface()->GetFileSize(&fileSize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileStream::GetFileSize");
      return fileSize;
    }

    void Factory::registerFontCollectionLoader(DW::FontCollectionLoader& fontCollectionLoader)
    {
      HRESULT hr = getRawInterface()->RegisterFontCollectionLoader(fontCollectionLoader.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::RegisterFontCollectionLoader");
    }

    void Factory::unregisterFontCollectionLoader(DW::FontCollectionLoader& fontCollectionLoader)
    {
      HRESULT hr = getRawInterface()->UnregisterFontCollectionLoader(fontCollectionLoader.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::UnregisterFontCollectionLoader");
    }

    DW::GdiInterop Factory::getGdiInterop()
    {
      IDWriteGdiInterop* gdiInterop = nullptr;
      HRESULT hr = getRawInterface()->GetGdiInterop(&gdiInterop);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::GetGdiInterop");
      return DW::GdiInterop(gdiInterop);
    }

    void Factory::registerFontFileLoader(DW::FontFileLoader& fontFileLoader)
    {
      HRESULT hr = getRawInterface()->RegisterFontFileLoader(fontFileLoader.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::RegisterFontFileLoader");
    }

    DW::InlineObject Factory::createEllipsisTrimmingSign(DW::TextFormat& textFormat)
    {
      IDWriteInlineObject* trimmingSign = nullptr;
      HRESULT hr = getRawInterface()->CreateEllipsisTrimmingSign(textFormat.getRawInterface(), &trimmingSign);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateEllipsisTrimmingSign");
      return DW::InlineObject(trimmingSign);
    }

    DW::FontFile Factory::createFontFileReference(const wchar_t* filePath)
    {
      IDWriteFontFile* fontFile = nullptr;
      HRESULT hr = getRawInterface()->CreateFontFileReference(filePath, nullptr, &fontFile);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateFontFileReference");
      return DW::FontFile(fontFile);
    }

    DW::FontFile Factory::createFontFileReference(const wchar_t* filePath, const FILETIME& lastWriteTime)
    {
      IDWriteFontFile* fontFile = nullptr;
      HRESULT hr = getRawInterface()->CreateFontFileReference(filePath, &lastWriteTime, &fontFile);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateFontFileReference");
      return DW::FontFile(fontFile);
    }

    void Factory::unregisterFontFileLoader(DW::FontFileLoader& fontFileLoader)
    {
      HRESULT hr = getRawInterface()->UnregisterFontFileLoader(fontFileLoader.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::UnregisterFontFileLoader");
    }

    DW::RenderingParams Factory::createMonitorRenderingParams(HMONITOR monitor)
    {
      IDWriteRenderingParams* renderingParams = nullptr;
      HRESULT hr = getRawInterface()->CreateMonitorRenderingParams(monitor, &renderingParams);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateMonitorRenderingParams");
      return DW::RenderingParams(renderingParams);
    }

    DW::FontCollection Factory::createCustomFontCollection(DW::FontCollectionLoader& collectionLoader)
    {
      IDWriteFontCollection* fontCollection = nullptr;
      HRESULT hr = getRawInterface()->CreateCustomFontCollection(collectionLoader.getRawInterface(), nullptr, 0, &fontCollection);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateCustomFontCollection");
      return DW::FontCollection(fontCollection);
    }

    DW::TextAnalyzer Factory::createTextAnalyzer()
    {
      IDWriteTextAnalyzer* textAnalyzer = nullptr;
      HRESULT hr = getRawInterface()->CreateTextAnalyzer(&textAnalyzer);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateTextAnalyzer");
      return DW::TextAnalyzer(textAnalyzer);
    }

    DW::FontFile Factory::createCustomFontFileReference(DW::FontFileLoader& fontFileLoader)
    {
      IDWriteFontFile* fontFile = nullptr;
      HRESULT hr = getRawInterface()->CreateCustomFontFileReference(nullptr, 0, fontFileLoader.getRawInterface(), &fontFile);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateCustomFontFileReference");
      return DW::FontFile(fontFile);
    }

    DW::RenderingParams Factory::createRenderingParams()
    {
      IDWriteRenderingParams* renderingParams = nullptr;
      HRESULT hr = getRawInterface()->CreateRenderingParams(&renderingParams);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateRenderingParams");
      return DW::RenderingParams(renderingParams);
    }

    DW::NumberSubstitution Factory::createNumberSubstitution(DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, const wchar_t* localeName, BOOL ignoreUserOverride)
    {
      IDWriteNumberSubstitution* numberSubstitution = nullptr;
      HRESULT hr = getRawInterface()->CreateNumberSubstitution(substitutionMethod, localeName, ignoreUserOverride, &numberSubstitution);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateNumberSubstitution");
      return DW::NumberSubstitution(numberSubstitution);
    }

    DW::Typography Factory::createTypography()
    {
      IDWriteTypography* typography = nullptr;
      HRESULT hr = getRawInterface()->CreateTypography(&typography);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateTypography");
      return DW::Typography(typography);
    }

    DW::TextFormat Factory::createTextFormat(const wchar_t* fontFamilyName, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, const wchar_t* localeName)
    {
      IDWriteTextFormat* textFormat = nullptr;
      HRESULT hr = getRawInterface()->CreateTextFormat(fontFamilyName, nullptr, fontWeight, fontStyle, fontStretch, fontSize, localeName, &textFormat);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateTextFormat");
      return DW::TextFormat(textFormat);
    }

    DW::TextFormat Factory::createTextFormat(const wchar_t* fontFamilyName, DW::FontCollection& fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, const wchar_t* localeName)
    {
      IDWriteTextFormat* textFormat = nullptr;
      HRESULT hr = getRawInterface()->CreateTextFormat(fontFamilyName, fontCollection.getRawInterface(), fontWeight, fontStyle, fontStretch, fontSize, localeName, &textFormat);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateTextFormat");
      return DW::TextFormat(textFormat);
    }

    DW::RenderingParams Factory::createCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode)
    {
      IDWriteRenderingParams* renderingParams = nullptr;
      HRESULT hr = getRawInterface()->CreateCustomRenderingParams(gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, &renderingParams);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateCustomRenderingParams");
      return DW::RenderingParams(renderingParams);
    }

    DW::FontCollection Factory::getSystemFontCollection()
    {
      IDWriteFontCollection* fontCollection = nullptr;
      HRESULT hr = getRawInterface()->GetSystemFontCollection(&fontCollection, FALSE);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::GetSystemFontCollection");
      return DW::FontCollection(fontCollection);
    }

    DW::FontCollection Factory::getSystemFontCollection(BOOL checkForUpdates)
    {
      IDWriteFontCollection* fontCollection = nullptr;
      HRESULT hr = getRawInterface()->GetSystemFontCollection(&fontCollection, checkForUpdates);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::GetSystemFontCollection");
      return DW::FontCollection(fontCollection);
    }

    DW::GlyphRunAnalysis Factory::createGlyphRunAnalysis(const DWRITE_GLYPH_RUN& glyphRun, float pixelsPerDip, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY)
    {
      IDWriteGlyphRunAnalysis* glyphRunAnalysis = nullptr;
      HRESULT hr = getRawInterface()->CreateGlyphRunAnalysis(&glyphRun, pixelsPerDip, nullptr, renderingMode, measuringMode, baselineOriginX, baselineOriginY, &glyphRunAnalysis);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateGlyphRunAnalysis");
      return DW::GlyphRunAnalysis(glyphRunAnalysis);
    }

    DW::GlyphRunAnalysis Factory::createGlyphRunAnalysis(const DWRITE_GLYPH_RUN& glyphRun, float pixelsPerDip, const DWRITE_MATRIX& transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY)
    {
      IDWriteGlyphRunAnalysis* glyphRunAnalysis = nullptr;
      HRESULT hr = getRawInterface()->CreateGlyphRunAnalysis(&glyphRun, pixelsPerDip, &transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, &glyphRunAnalysis);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFactory::CreateGlyphRunAnalysis");
      return DW::GlyphRunAnalysis(glyphRunAnalysis);
    }

    float RenderingParams::getGamma()
    {
      return getRawInterface()->GetGamma();
    }

    DWRITE_RENDERING_MODE RenderingParams::getRenderingMode()
    {
      return getRawInterface()->GetRenderingMode();
    }

    DWRITE_PIXEL_GEOMETRY RenderingParams::getPixelGeometry()
    {
      return getRawInterface()->GetPixelGeometry();
    }

    float RenderingParams::getClearTypeLevel()
    {
      return getRawInterface()->GetClearTypeLevel();
    }

    float RenderingParams::getEnhancedContrast()
    {
      return getRawInterface()->GetEnhancedContrast();
    }

    DWRITE_TEXT_ALIGNMENT TextFormat::getTextAlignment()
    {
      return getRawInterface()->GetTextAlignment();
    }

    std::vector<wchar_t> TextFormat::getFontFamilyName(uint32_t nameSize)
    {
      std::vector<wchar_t> fontFamilyName(static_cast<size_t>(nameSize));
      HRESULT hr = getRawInterface()->GetFontFamilyName(fontFamilyName.data(), nameSize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::GetFontFamilyName");
      return fontFamilyName;
    }

    DWRITE_FONT_STRETCH TextFormat::getFontStretch()
    {
      return getRawInterface()->GetFontStretch();
    }

    void TextFormat::setLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline)
    {
      HRESULT hr = getRawInterface()->SetLineSpacing(lineSpacingMethod, lineSpacing, baseline);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetLineSpacing");
    }

    void TextFormat::setIncrementalTabStop(float incrementalTabStop)
    {
      HRESULT hr = getRawInterface()->SetIncrementalTabStop(incrementalTabStop);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetIncrementalTabStop");
    }

    DWRITE_FLOW_DIRECTION TextFormat::getFlowDirection()
    {
      return getRawInterface()->GetFlowDirection();
    }

    void TextFormat::setTrimming(const DWRITE_TRIMMING& trimmingOptions, DW::InlineObject& trimmingSign)
    {
      HRESULT hr = getRawInterface()->SetTrimming(&trimmingOptions, trimmingSign.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetTrimming");
    }

    void TextFormat::setReadingDirection(DWRITE_READING_DIRECTION readingDirection)
    {
      HRESULT hr = getRawInterface()->SetReadingDirection(readingDirection);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetReadingDirection");
    }

    void TextFormat::setParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment)
    {
      HRESULT hr = getRawInterface()->SetParagraphAlignment(paragraphAlignment);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetParagraphAlignment");
    }

    std::vector<wchar_t> TextFormat::getLocaleName(uint32_t nameSize)
    {
      std::vector<wchar_t> localeName(static_cast<size_t>(nameSize));
      HRESULT hr = getRawInterface()->GetLocaleName(localeName.data(), nameSize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::GetLocaleName");
      return localeName;
    }

    uint32_t TextFormat::getFontFamilyNameLength()
    {
      return getRawInterface()->GetFontFamilyNameLength();
    }

    DWRITE_READING_DIRECTION TextFormat::getReadingDirection()
    {
      return getRawInterface()->GetReadingDirection();
    }

    DWRITE_WORD_WRAPPING TextFormat::getWordWrapping()
    {
      return getRawInterface()->GetWordWrapping();
    }

    void TextFormat::setFlowDirection(DWRITE_FLOW_DIRECTION flowDirection)
    {
      HRESULT hr = getRawInterface()->SetFlowDirection(flowDirection);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetFlowDirection");
    }

    std::tuple<DWRITE_TRIMMING, DW::InlineObject> TextFormat::getTrimming()
    {
      DWRITE_TRIMMING trimmingOptions = DWRITE_TRIMMING();
      IDWriteInlineObject* trimmingSign = nullptr;
      HRESULT hr = getRawInterface()->GetTrimming(&trimmingOptions, &trimmingSign);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::GetTrimming");
      return std::make_tuple(std::move(trimmingOptions), std::move(DW::InlineObject(trimmingSign)));
    }

    uint32_t TextFormat::getLocaleNameLength()
    {
      return getRawInterface()->GetLocaleNameLength();
    }

    float TextFormat::getFontSize()
    {
      return getRawInterface()->GetFontSize();
    }

    DWRITE_FONT_STYLE TextFormat::getFontStyle()
    {
      return getRawInterface()->GetFontStyle();
    }

    DW::FontCollection TextFormat::getFontCollection()
    {
      IDWriteFontCollection* fontCollection = nullptr;
      HRESULT hr = getRawInterface()->GetFontCollection(&fontCollection);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::GetFontCollection");
      return DW::FontCollection(fontCollection);
    }

    DWRITE_FONT_WEIGHT TextFormat::getFontWeight()
    {
      return getRawInterface()->GetFontWeight();
    }

    float TextFormat::getIncrementalTabStop()
    {
      return getRawInterface()->GetIncrementalTabStop();
    }

    std::tuple<DWRITE_LINE_SPACING_METHOD, float, float> TextFormat::getLineSpacing()
    {
      DWRITE_LINE_SPACING_METHOD lineSpacingMethod = DWRITE_LINE_SPACING_METHOD();
      float lineSpacing = float();
      float baseline = float();
      HRESULT hr = getRawInterface()->GetLineSpacing(&lineSpacingMethod, &lineSpacing, &baseline);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::GetLineSpacing");
      return std::make_tuple(std::move(lineSpacingMethod), std::move(lineSpacing), std::move(baseline));
    }

    void TextFormat::setTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment)
    {
      HRESULT hr = getRawInterface()->SetTextAlignment(textAlignment);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetTextAlignment");
    }

    DWRITE_PARAGRAPH_ALIGNMENT TextFormat::getParagraphAlignment()
    {
      return getRawInterface()->GetParagraphAlignment();
    }

    void TextFormat::setWordWrapping(DWRITE_WORD_WRAPPING wordWrapping)
    {
      HRESULT hr = getRawInterface()->SetWordWrapping(wordWrapping);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextFormat::SetWordWrapping");
    }

    std::tuple<bool, bool, DWRITE_HIT_TEST_METRICS> TextLayout::hitTestPoint(float pointX, float pointY)
    {
      BOOL isTrailingHit = BOOL();
      BOOL isInside = BOOL();
      DWRITE_HIT_TEST_METRICS hitTestMetrics = DWRITE_HIT_TEST_METRICS();
      HRESULT hr = getRawInterface()->HitTestPoint(pointX, pointY, &isTrailingHit, &isInside, &hitTestMetrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::HitTestPoint");
      return std::make_tuple(std::move(isTrailingHit != FALSE), std::move(isInside != FALSE), std::move(hitTestMetrics));
    }

    void TextLayout::setLocaleName(const wchar_t* localeName, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetLocaleName(localeName, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetLocaleName");
    }

    std::tuple<DWRITE_FONT_STRETCH, DWRITE_TEXT_RANGE> TextLayout::getFontStretch(uint32_t currentPosition)
    {
      DWRITE_FONT_STRETCH fontStretch = DWRITE_FONT_STRETCH();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontStretch(currentPosition, &fontStretch, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontStretch");
      return std::make_tuple(std::move(fontStretch), std::move(textRange));
    }

    void TextLayout::setUnderline(BOOL hasUnderline, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetUnderline(hasUnderline, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetUnderline");
    }

    std::tuple<DWRITE_FONT_STYLE, DWRITE_TEXT_RANGE> TextLayout::getFontStyle(uint32_t currentPosition)
    {
      DWRITE_FONT_STYLE fontStyle = DWRITE_FONT_STYLE();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontStyle(currentPosition, &fontStyle, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontStyle");
      return std::make_tuple(std::move(fontStyle), std::move(textRange));
    }

    std::tuple<float, float, DWRITE_HIT_TEST_METRICS> TextLayout::hitTestTextPosition(uint32_t textPosition, BOOL isTrailingHit)
    {
      float pointX = float();
      float pointY = float();
      DWRITE_HIT_TEST_METRICS hitTestMetrics = DWRITE_HIT_TEST_METRICS();
      HRESULT hr = getRawInterface()->HitTestTextPosition(textPosition, isTrailingHit, &pointX, &pointY, &hitTestMetrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::HitTestTextPosition");
      return std::make_tuple(std::move(pointX), std::move(pointY), std::move(hitTestMetrics));
    }

    void TextLayout::setFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontWeight(fontWeight, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontWeight");
    }

    std::tuple<bool, DWRITE_TEXT_RANGE> TextLayout::getUnderline(uint32_t currentPosition)
    {
      BOOL hasUnderline = BOOL();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetUnderline(currentPosition, &hasUnderline, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetUnderline");
      return std::make_tuple(std::move(hasUnderline != FALSE), std::move(textRange));
    }

    std::tuple<DW::InlineObject, DWRITE_TEXT_RANGE> TextLayout::getInlineObject(uint32_t currentPosition)
    {
      IDWriteInlineObject* inlineObject = nullptr;
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetInlineObject(currentPosition, &inlineObject, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetInlineObject");
      return std::make_tuple(std::move(DW::InlineObject(inlineObject)), std::move(textRange));
    }

    std::tuple<std::vector<DWRITE_CLUSTER_METRICS>, uint32_t> TextLayout::getClusterMetrics(uint32_t maxClusterCount)
    {
      std::vector<DWRITE_CLUSTER_METRICS> clusterMetrics(static_cast<size_t>(maxClusterCount));
      uint32_t actualClusterCount = uint32_t();
      HRESULT hr = getRawInterface()->GetClusterMetrics(clusterMetrics.data(), maxClusterCount, &actualClusterCount);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetClusterMetrics");
      return std::make_tuple(std::move(clusterMetrics), std::move(actualClusterCount));
    }

    void TextLayout::setMaxHeight(float maxHeight)
    {
      HRESULT hr = getRawInterface()->SetMaxHeight(maxHeight);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetMaxHeight");
    }

    std::tuple<std::vector<DWRITE_LINE_METRICS>, uint32_t> TextLayout::getLineMetrics(uint32_t maxLineCount)
    {
      std::vector<DWRITE_LINE_METRICS> lineMetrics(static_cast<size_t>(maxLineCount));
      uint32_t actualLineCount = uint32_t();
      HRESULT hr = getRawInterface()->GetLineMetrics(lineMetrics.data(), maxLineCount, &actualLineCount);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetLineMetrics");
      return std::make_tuple(std::move(lineMetrics), std::move(actualLineCount));
    }

    std::tuple<std::vector<wchar_t>, DWRITE_TEXT_RANGE> TextLayout::getFontFamilyName(uint32_t currentPosition, uint32_t nameSize)
    {
      std::vector<wchar_t> fontFamilyName(static_cast<size_t>(nameSize));
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontFamilyName(currentPosition, fontFamilyName.data(), nameSize, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontFamilyName");
      return std::make_tuple(std::move(fontFamilyName), std::move(textRange));
    }

    std::tuple<COMObject, DWRITE_TEXT_RANGE> TextLayout::getDrawingEffect(uint32_t currentPosition)
    {
      IUnknown* drawingEffect = nullptr;
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetDrawingEffect(currentPosition, &drawingEffect, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetDrawingEffect");
      return std::make_tuple(std::move(COMObject(drawingEffect)), std::move(textRange));
    }

    DWRITE_TEXT_METRICS TextLayout::getMetrics()
    {
      DWRITE_TEXT_METRICS textMetrics = DWRITE_TEXT_METRICS();
      HRESULT hr = getRawInterface()->GetMetrics(&textMetrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetMetrics");
      return textMetrics;
    }

    void TextLayout::setInlineObject(DW::InlineObject& inlineObject, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetInlineObject(inlineObject.getRawInterface(), textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetInlineObject");
    }

    void TextLayout::draw(DW::TextRenderer& renderer, float originX, float originY)
    {
      HRESULT hr = getRawInterface()->Draw(nullptr, renderer.getRawInterface(), originX, originY);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::Draw");
    }

    void TextLayout::draw(void* clientDrawingContext, DW::TextRenderer& renderer, float originX, float originY)
    {
      HRESULT hr = getRawInterface()->Draw(clientDrawingContext, renderer.getRawInterface(), originX, originY);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::Draw");
    }

    float TextLayout::determineMinWidth()
    {
      float minWidth = float();
      HRESULT hr = getRawInterface()->DetermineMinWidth(&minWidth);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::DetermineMinWidth");
      return minWidth;
    }

    DWRITE_OVERHANG_METRICS TextLayout::getOverhangMetrics()
    {
      DWRITE_OVERHANG_METRICS overhangs = DWRITE_OVERHANG_METRICS();
      HRESULT hr = getRawInterface()->GetOverhangMetrics(&overhangs);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetOverhangMetrics");
      return overhangs;
    }

    float TextLayout::getMaxHeight()
    {
      return getRawInterface()->GetMaxHeight();
    }

    std::tuple<std::vector<DWRITE_HIT_TEST_METRICS>, uint32_t> TextLayout::hitTestTextRange(uint32_t textPosition, uint32_t textLength, float originX, float originY, uint32_t maxHitTestMetricsCount)
    {
      std::vector<DWRITE_HIT_TEST_METRICS> hitTestMetrics(static_cast<size_t>(maxHitTestMetricsCount));
      uint32_t actualHitTestMetricsCount = uint32_t();
      HRESULT hr = getRawInterface()->HitTestTextRange(textPosition, textLength, originX, originY, hitTestMetrics.data(), maxHitTestMetricsCount, &actualHitTestMetricsCount);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::HitTestTextRange");
      return std::make_tuple(std::move(hitTestMetrics), std::move(actualHitTestMetricsCount));
    }

    std::tuple<std::vector<wchar_t>, DWRITE_TEXT_RANGE> TextLayout::getLocaleName(uint32_t currentPosition, uint32_t nameSize)
    {
      std::vector<wchar_t> localeName(static_cast<size_t>(nameSize));
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetLocaleName(currentPosition, localeName.data(), nameSize, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetLocaleName");
      return std::make_tuple(std::move(localeName), std::move(textRange));
    }

    std::tuple<float, DWRITE_TEXT_RANGE> TextLayout::getFontSize(uint32_t currentPosition)
    {
      float fontSize = float();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontSize(currentPosition, &fontSize, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontSize");
      return std::make_tuple(std::move(fontSize), std::move(textRange));
    }

    void TextLayout::setFontCollection(DW::FontCollection& fontCollection, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontCollection(fontCollection.getRawInterface(), textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontCollection");
    }

    std::tuple<uint32_t, DWRITE_TEXT_RANGE> TextLayout::getFontFamilyNameLength(uint32_t currentPosition)
    {
      uint32_t nameLength = uint32_t();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontFamilyNameLength(currentPosition, &nameLength, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontFamilyNameLength");
      return std::make_tuple(std::move(nameLength), std::move(textRange));
    }

    std::tuple<uint32_t, DWRITE_TEXT_RANGE> TextLayout::getLocaleNameLength(uint32_t currentPosition)
    {
      uint32_t nameLength = uint32_t();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetLocaleNameLength(currentPosition, &nameLength, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetLocaleNameLength");
      return std::make_tuple(std::move(nameLength), std::move(textRange));
    }

    std::tuple<DWRITE_FONT_WEIGHT, DWRITE_TEXT_RANGE> TextLayout::getFontWeight(uint32_t currentPosition)
    {
      DWRITE_FONT_WEIGHT fontWeight = DWRITE_FONT_WEIGHT();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontWeight(currentPosition, &fontWeight, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontWeight");
      return std::make_tuple(std::move(fontWeight), std::move(textRange));
    }

    std::tuple<DW::Typography, DWRITE_TEXT_RANGE> TextLayout::getTypography(uint32_t currentPosition)
    {
      IDWriteTypography* typography = nullptr;
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetTypography(currentPosition, &typography, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetTypography");
      return std::make_tuple(std::move(DW::Typography(typography)), std::move(textRange));
    }

    std::tuple<bool, DWRITE_TEXT_RANGE> TextLayout::getStrikethrough(uint32_t currentPosition)
    {
      BOOL hasStrikethrough = BOOL();
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetStrikethrough(currentPosition, &hasStrikethrough, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetStrikethrough");
      return std::make_tuple(std::move(hasStrikethrough != FALSE), std::move(textRange));
    }

    void TextLayout::setFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontStretch(fontStretch, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontStretch");
    }

    float TextLayout::getMaxWidth()
    {
      return getRawInterface()->GetMaxWidth();
    }

    void TextLayout::setFontSize(float fontSize, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontSize(fontSize, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontSize");
    }

    std::tuple<DW::FontCollection, DWRITE_TEXT_RANGE> TextLayout::getFontCollection(uint32_t currentPosition)
    {
      IDWriteFontCollection* fontCollection = nullptr;
      DWRITE_TEXT_RANGE textRange = DWRITE_TEXT_RANGE();
      HRESULT hr = getRawInterface()->GetFontCollection(currentPosition, &fontCollection, &textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::GetFontCollection");
      return std::make_tuple(std::move(DW::FontCollection(fontCollection)), std::move(textRange));
    }

    void TextLayout::setDrawingEffect(COMObject& drawingEffect, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetDrawingEffect(drawingEffect.getRawInterface(), textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetDrawingEffect");
    }

    void TextLayout::setMaxWidth(float maxWidth)
    {
      HRESULT hr = getRawInterface()->SetMaxWidth(maxWidth);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetMaxWidth");
    }

    void TextLayout::setFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontStyle(fontStyle, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontStyle");
    }

    void TextLayout::setStrikethrough(BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetStrikethrough(hasStrikethrough, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetStrikethrough");
    }

    void TextLayout::setFontFamilyName(const wchar_t* fontFamilyName, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetFontFamilyName(fontFamilyName, textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetFontFamilyName");
    }

    void TextLayout::setTypography(DW::Typography& typography, DWRITE_TEXT_RANGE textRange)
    {
      HRESULT hr = getRawInterface()->SetTypography(typography.getRawInterface(), textRange);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextLayout::SetTypography");
    }

    DW::FontFileStream FontFileLoader::createStreamFromKey()
    {
      IDWriteFontFileStream* fontFileStream = nullptr;
      HRESULT hr = getRawInterface()->CreateStreamFromKey(nullptr, 0, &fontFileStream);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFileLoader::CreateStreamFromKey");
      return DW::FontFileStream(fontFileStream);
    }

    std::vector<wchar_t> LocalFontFileLoader::getFilePathFromKey(uint32_t filePathSize)
    {
      std::vector<wchar_t> filePath(static_cast<size_t>(filePathSize));
      HRESULT hr = getRawInterface()->GetFilePathFromKey(nullptr, 0, filePath.data(), filePathSize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalFontFileLoader::GetFilePathFromKey");
      return filePath;
    }

    FILETIME LocalFontFileLoader::getLastWriteTimeFromKey()
    {
      FILETIME lastWriteTime = FILETIME();
      HRESULT hr = getRawInterface()->GetLastWriteTimeFromKey(nullptr, 0, &lastWriteTime);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalFontFileLoader::GetLastWriteTimeFromKey");
      return lastWriteTime;
    }

    uint32_t LocalFontFileLoader::getFilePathLengthFromKey()
    {
      uint32_t filePathLength = uint32_t();
      HRESULT hr = getRawInterface()->GetFilePathLengthFromKey(nullptr, 0, &filePathLength);
      if(FAILED(hr)) throw COMException(hr, "IDWriteLocalFontFileLoader::GetFilePathLengthFromKey");
      return filePathLength;
    }

    DWRITE_FONT_STYLE Font::getStyle()
    {
      return getRawInterface()->GetStyle();
    }

    DW::LocalizedStrings Font::getFaceNames()
    {
      IDWriteLocalizedStrings* names = nullptr;
      HRESULT hr = getRawInterface()->GetFaceNames(&names);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFont::GetFaceNames");
      return DW::LocalizedStrings(names);
    }

    DWRITE_FONT_STRETCH Font::getStretch()
    {
      return getRawInterface()->GetStretch();
    }

    BOOL Font::isSymbolFont()
    {
      return getRawInterface()->IsSymbolFont();
    }

    DWRITE_FONT_SIMULATIONS Font::getSimulations()
    {
      return getRawInterface()->GetSimulations();
    }

    bool Font::hasCharacter(uint32_t unicodeValue)
    {
      BOOL exists = BOOL();
      HRESULT hr = getRawInterface()->HasCharacter(unicodeValue, &exists);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFont::HasCharacter");
      return exists != FALSE;
    }

    DWRITE_FONT_WEIGHT Font::getWeight()
    {
      return getRawInterface()->GetWeight();
    }

    DW::FontFamily Font::getFontFamily()
    {
      IDWriteFontFamily* fontFamily = nullptr;
      HRESULT hr = getRawInterface()->GetFontFamily(&fontFamily);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFont::GetFontFamily");
      return DW::FontFamily(fontFamily);
    }

    std::tuple<DW::LocalizedStrings, bool> Font::getInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID)
    {
      IDWriteLocalizedStrings* informationalStrings = nullptr;
      BOOL exists = BOOL();
      HRESULT hr = getRawInterface()->GetInformationalStrings(informationalStringID, &informationalStrings, &exists);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFont::GetInformationalStrings");
      return std::make_tuple(std::move(DW::LocalizedStrings(informationalStrings)), std::move(exists != FALSE));
    }

    DW::FontFace Font::createFontFace()
    {
      IDWriteFontFace* fontFace = nullptr;
      HRESULT hr = getRawInterface()->CreateFontFace(&fontFace);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFont::CreateFontFace");
      return DW::FontFace(fontFace);
    }

    DWRITE_FONT_METRICS Font::getMetrics()
    {
      DWRITE_FONT_METRICS fontMetrics = DWRITE_FONT_METRICS();
      getRawInterface()->GetMetrics(&fontMetrics);
      return fontMetrics;
    }

    void Typography::addFontFeature(DWRITE_FONT_FEATURE fontFeature)
    {
      HRESULT hr = getRawInterface()->AddFontFeature(fontFeature);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTypography::AddFontFeature");
    }

    uint32_t Typography::getFontFeatureCount()
    {
      return getRawInterface()->GetFontFeatureCount();
    }

    DWRITE_FONT_FEATURE Typography::getFontFeature(uint32_t fontFeatureIndex)
    {
      DWRITE_FONT_FEATURE fontFeature = DWRITE_FONT_FEATURE();
      HRESULT hr = getRawInterface()->GetFontFeature(fontFeatureIndex, &fontFeature);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTypography::GetFontFeature");
      return fontFeature;
    }

    std::tuple<uint32_t, DW::NumberSubstitution> TextAnalysisSource::getNumberSubstitution(uint32_t textPosition)
    {
      uint32_t textLength = uint32_t();
      IDWriteNumberSubstitution* numberSubstitution = nullptr;
      HRESULT hr = getRawInterface()->GetNumberSubstitution(textPosition, &textLength, &numberSubstitution);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSource::GetNumberSubstitution");
      return std::make_tuple(std::move(textLength), std::move(DW::NumberSubstitution(numberSubstitution)));
    }

    std::tuple<const wchar_t*, uint32_t> TextAnalysisSource::getTextAtPosition(uint32_t textPosition)
    {
      const wchar_t* textString = nullptr;
      uint32_t textLength = uint32_t();
      HRESULT hr = getRawInterface()->GetTextAtPosition(textPosition, &textString, &textLength);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSource::GetTextAtPosition");
      return std::make_tuple(std::move(textString), std::move(textLength));
    }

    std::tuple<const wchar_t*, uint32_t> TextAnalysisSource::getTextBeforePosition(uint32_t textPosition)
    {
      const wchar_t* textString = nullptr;
      uint32_t textLength = uint32_t();
      HRESULT hr = getRawInterface()->GetTextBeforePosition(textPosition, &textString, &textLength);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSource::GetTextBeforePosition");
      return std::make_tuple(std::move(textString), std::move(textLength));
    }

    DWRITE_READING_DIRECTION TextAnalysisSource::getParagraphReadingDirection()
    {
      return getRawInterface()->GetParagraphReadingDirection();
    }

    std::tuple<uint32_t, const wchar_t*> TextAnalysisSource::getLocaleName(uint32_t textPosition)
    {
      uint32_t textLength = uint32_t();
      const wchar_t* localeName = nullptr;
      HRESULT hr = getRawInterface()->GetLocaleName(textPosition, &textLength, &localeName);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSource::GetLocaleName");
      return std::make_tuple(std::move(textLength), std::move(localeName));
    }

    bool PixelSnapping::isPixelSnappingDisabled()
    {
      BOOL isDisabled = BOOL();
      HRESULT hr = getRawInterface()->IsPixelSnappingDisabled(nullptr, &isDisabled);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::IsPixelSnappingDisabled");
      return isDisabled != FALSE;
    }

    bool PixelSnapping::isPixelSnappingDisabled(void* clientDrawingContext)
    {
      BOOL isDisabled = BOOL();
      HRESULT hr = getRawInterface()->IsPixelSnappingDisabled(clientDrawingContext, &isDisabled);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::IsPixelSnappingDisabled");
      return isDisabled != FALSE;
    }

    DWRITE_MATRIX PixelSnapping::getCurrentTransform()
    {
      DWRITE_MATRIX transform = DWRITE_MATRIX();
      HRESULT hr = getRawInterface()->GetCurrentTransform(nullptr, &transform);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::GetCurrentTransform");
      return transform;
    }

    DWRITE_MATRIX PixelSnapping::getCurrentTransform(void* clientDrawingContext)
    {
      DWRITE_MATRIX transform = DWRITE_MATRIX();
      HRESULT hr = getRawInterface()->GetCurrentTransform(clientDrawingContext, &transform);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::GetCurrentTransform");
      return transform;
    }

    float PixelSnapping::getPixelsPerDip()
    {
      float pixelsPerDip = float();
      HRESULT hr = getRawInterface()->GetPixelsPerDip(nullptr, &pixelsPerDip);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::GetPixelsPerDip");
      return pixelsPerDip;
    }

    float PixelSnapping::getPixelsPerDip(void* clientDrawingContext)
    {
      float pixelsPerDip = float();
      HRESULT hr = getRawInterface()->GetPixelsPerDip(clientDrawingContext, &pixelsPerDip);
      if(FAILED(hr)) throw COMException(hr, "IDWritePixelSnapping::GetPixelsPerDip");
      return pixelsPerDip;
    }

    void TextRenderer::drawStrikethrough(float baselineOriginX, float baselineOriginY, const DWRITE_STRIKETHROUGH& strikethrough)
    {
      HRESULT hr = getRawInterface()->DrawStrikethrough(nullptr, baselineOriginX, baselineOriginY, &strikethrough, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawStrikethrough");
    }

    void TextRenderer::drawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, const DWRITE_STRIKETHROUGH& strikethrough)
    {
      HRESULT hr = getRawInterface()->DrawStrikethrough(clientDrawingContext, baselineOriginX, baselineOriginY, &strikethrough, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawStrikethrough");
    }

    void TextRenderer::drawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, const DWRITE_STRIKETHROUGH& strikethrough, COMObject& clientDrawingEffect)
    {
      HRESULT hr = getRawInterface()->DrawStrikethrough(clientDrawingContext, baselineOriginX, baselineOriginY, &strikethrough, clientDrawingEffect.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawStrikethrough");
    }

    void TextRenderer::drawInlineObject(float originX, float originY, DW::InlineObject& inlineObject, BOOL isSideways, BOOL isRightToLeft)
    {
      HRESULT hr = getRawInterface()->DrawInlineObject(nullptr, originX, originY, inlineObject.getRawInterface(), isSideways, isRightToLeft, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawInlineObject");
    }

    void TextRenderer::drawInlineObject(void* clientDrawingContext, float originX, float originY, DW::InlineObject& inlineObject, BOOL isSideways, BOOL isRightToLeft)
    {
      HRESULT hr = getRawInterface()->DrawInlineObject(clientDrawingContext, originX, originY, inlineObject.getRawInterface(), isSideways, isRightToLeft, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawInlineObject");
    }

    void TextRenderer::drawInlineObject(void* clientDrawingContext, float originX, float originY, DW::InlineObject& inlineObject, BOOL isSideways, BOOL isRightToLeft, COMObject& clientDrawingEffect)
    {
      HRESULT hr = getRawInterface()->DrawInlineObject(clientDrawingContext, originX, originY, inlineObject.getRawInterface(), isSideways, isRightToLeft, clientDrawingEffect.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawInlineObject");
    }

    void TextRenderer::drawUnderline(float baselineOriginX, float baselineOriginY, const DWRITE_UNDERLINE& underline)
    {
      HRESULT hr = getRawInterface()->DrawUnderline(nullptr, baselineOriginX, baselineOriginY, &underline, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawUnderline");
    }

    void TextRenderer::drawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, const DWRITE_UNDERLINE& underline)
    {
      HRESULT hr = getRawInterface()->DrawUnderline(clientDrawingContext, baselineOriginX, baselineOriginY, &underline, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawUnderline");
    }

    void TextRenderer::drawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, const DWRITE_UNDERLINE& underline, COMObject& clientDrawingEffect)
    {
      HRESULT hr = getRawInterface()->DrawUnderline(clientDrawingContext, baselineOriginX, baselineOriginY, &underline, clientDrawingEffect.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawUnderline");
    }

    void TextRenderer::drawGlyphRun(float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN& glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION& glyphRunDescription)
    {
      HRESULT hr = getRawInterface()->DrawGlyphRun(nullptr, baselineOriginX, baselineOriginY, measuringMode, &glyphRun, &glyphRunDescription, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawGlyphRun");
    }

    void TextRenderer::drawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN& glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION& glyphRunDescription)
    {
      HRESULT hr = getRawInterface()->DrawGlyphRun(clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, &glyphRun, &glyphRunDescription, nullptr);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawGlyphRun");
    }

    void TextRenderer::drawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, const DWRITE_GLYPH_RUN& glyphRun, const DWRITE_GLYPH_RUN_DESCRIPTION& glyphRunDescription, COMObject& clientDrawingEffect)
    {
      HRESULT hr = getRawInterface()->DrawGlyphRun(clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, &glyphRun, &glyphRunDescription, clientDrawingEffect.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextRenderer::DrawGlyphRun");
    }

    DW::FontFileEnumerator FontCollectionLoader::createEnumeratorFromKey(DW::Factory& factory)
    {
      IDWriteFontFileEnumerator* fontFileEnumerator = nullptr;
      HRESULT hr = getRawInterface()->CreateEnumeratorFromKey(factory.getRawInterface(), nullptr, 0, &fontFileEnumerator);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontCollectionLoader::CreateEnumeratorFromKey");
      return DW::FontFileEnumerator(fontFileEnumerator);
    }

    void TextAnalysisSink::setNumberSubstitution(uint32_t textPosition, uint32_t textLength, DW::NumberSubstitution& numberSubstitution)
    {
      HRESULT hr = getRawInterface()->SetNumberSubstitution(textPosition, textLength, numberSubstitution.getRawInterface());
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSink::SetNumberSubstitution");
    }

    void TextAnalysisSink::setBidiLevel(uint32_t textPosition, uint32_t textLength, UINT8 explicitLevel, UINT8 resolvedLevel)
    {
      HRESULT hr = getRawInterface()->SetBidiLevel(textPosition, textLength, explicitLevel, resolvedLevel);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSink::SetBidiLevel");
    }

    void TextAnalysisSink::setScriptAnalysis(uint32_t textPosition, uint32_t textLength, const DWRITE_SCRIPT_ANALYSIS& scriptAnalysis)
    {
      HRESULT hr = getRawInterface()->SetScriptAnalysis(textPosition, textLength, &scriptAnalysis);
      if(FAILED(hr)) throw COMException(hr, "IDWriteTextAnalysisSink::SetScriptAnalysis");
    }

    DW::FontFileLoader FontFile::getLoader()
    {
      IDWriteFontFileLoader* fontFileLoader = nullptr;
      HRESULT hr = getRawInterface()->GetLoader(&fontFileLoader);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFile::GetLoader");
      return DW::FontFileLoader(fontFileLoader);
    }

    uint32_t FontFile::getReferenceKey(const void** fontFileReferenceKey)
    {
      uint32_t fontFileReferenceKeySize = uint32_t();
      HRESULT hr = getRawInterface()->GetReferenceKey(fontFileReferenceKey, &fontFileReferenceKeySize);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFile::GetReferenceKey");
      return fontFileReferenceKeySize;
    }

    std::tuple<bool, DWRITE_FONT_FILE_TYPE, DWRITE_FONT_FACE_TYPE, uint32_t> FontFile::analyze()
    {
      BOOL isSupportedFontType = BOOL();
      DWRITE_FONT_FILE_TYPE fontFileType = DWRITE_FONT_FILE_TYPE();
      DWRITE_FONT_FACE_TYPE fontFaceType = DWRITE_FONT_FACE_TYPE();
      uint32_t numberOfFaces = uint32_t();
      HRESULT hr = getRawInterface()->Analyze(&isSupportedFontType, &fontFileType, &fontFaceType, &numberOfFaces);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFile::Analyze");
      return std::make_tuple(std::move(isSupportedFontType != FALSE), std::move(fontFileType), std::move(fontFaceType), std::move(numberOfFaces));
    }

    std::vector<IDWriteFontFile*> FontFace::getFiles(uint32_t* numberOfFiles)
    {
      std::vector<IDWriteFontFile*> fontFiles(static_cast<size_t>(numberOfFiles ? *numberOfFiles : 0));
      HRESULT hr = getRawInterface()->GetFiles(numberOfFiles, fontFiles.data());
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFace::GetFiles");
      return fontFiles;
    }

    DWRITE_FONT_METRICS FontFace::getMetrics()
    {
      DWRITE_FONT_METRICS fontFaceMetrics = DWRITE_FONT_METRICS();
      getRawInterface()->GetMetrics(&fontFaceMetrics);
      return fontFaceMetrics;
    }

    BOOL FontFace::isSymbolFont()
    {
      return getRawInterface()->IsSymbolFont();
    }

    uint32_t FontFace::getIndex()
    {
      return getRawInterface()->GetIndex();
    }

    DWRITE_RENDERING_MODE FontFace::getRecommendedRenderingMode(float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, DW::RenderingParams& renderingParams)
    {
      DWRITE_RENDERING_MODE renderingMode = DWRITE_RENDERING_MODE();
      HRESULT hr = getRawInterface()->GetRecommendedRenderingMode(emSize, pixelsPerDip, measuringMode, renderingParams.getRawInterface(), &renderingMode);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFace::GetRecommendedRenderingMode");
      return renderingMode;
    }

    void FontFace::releaseFontTable(void* tableContext)
    {
      getRawInterface()->ReleaseFontTable(tableContext);
    }

    DWRITE_FONT_FACE_TYPE FontFace::getType()
    {
      return getRawInterface()->GetType();
    }

    std::tuple<uint32_t, void*, bool> FontFace::tryGetFontTable(uint32_t openTypeTableTag, const void** tableData)
    {
      uint32_t tableSize = uint32_t();
      void* tableContext = nullptr;
      BOOL exists = BOOL();
      HRESULT hr = getRawInterface()->TryGetFontTable(openTypeTableTag, tableData, &tableSize, &tableContext, &exists);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFace::TryGetFontTable");
      return std::make_tuple(std::move(tableSize), std::move(tableContext), std::move(exists != FALSE));
    }

    DWRITE_FONT_SIMULATIONS FontFace::getSimulations()
    {
      return getRawInterface()->GetSimulations();
    }

    UINT16 FontFace::getGlyphCount()
    {
      return getRawInterface()->GetGlyphCount();
    }

    DWRITE_FONT_METRICS FontFace::getGdiCompatibleMetrics(float emSize, float pixelsPerDip)
    {
      DWRITE_FONT_METRICS fontFaceMetrics = DWRITE_FONT_METRICS();
      HRESULT hr = getRawInterface()->GetGdiCompatibleMetrics(emSize, pixelsPerDip, nullptr, &fontFaceMetrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFace::GetGdiCompatibleMetrics");
      return fontFaceMetrics;
    }

    DWRITE_FONT_METRICS FontFace::getGdiCompatibleMetrics(float emSize, float pixelsPerDip, const DWRITE_MATRIX& transform)
    {
      DWRITE_FONT_METRICS fontFaceMetrics = DWRITE_FONT_METRICS();
      HRESULT hr = getRawInterface()->GetGdiCompatibleMetrics(emSize, pixelsPerDip, &transform, &fontFaceMetrics);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFace::GetGdiCompatibleMetrics");
      return fontFaceMetrics;
    }

    DW::BitmapRenderTarget GdiInterop::createBitmapRenderTarget(HDC hdc, uint32_t width, uint32_t height)
    {
      IDWriteBitmapRenderTarget* renderTarget = nullptr;
      HRESULT hr = getRawInterface()->CreateBitmapRenderTarget(hdc, width, height, &renderTarget);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGdiInterop::CreateBitmapRenderTarget");
      return DW::BitmapRenderTarget(renderTarget);
    }

    DW::FontFace GdiInterop::createFontFaceFromHdc(HDC hdc)
    {
      IDWriteFontFace* fontFace = nullptr;
      HRESULT hr = getRawInterface()->CreateFontFaceFromHdc(hdc, &fontFace);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGdiInterop::CreateFontFaceFromHdc");
      return DW::FontFace(fontFace);
    }

    DW::Font GdiInterop::createFontFromLOGFONT(const LOGFONTW& logFont)
    {
      IDWriteFont* font = nullptr;
      HRESULT hr = getRawInterface()->CreateFontFromLOGFONT(&logFont, &font);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGdiInterop::CreateFontFromLOGFONT");
      return DW::Font(font);
    }

    std::tuple<LOGFONTW, bool> GdiInterop::convertFontToLOGFONT(DW::Font& font)
    {
      LOGFONTW logFont = LOGFONTW();
      BOOL isSystemFont = BOOL();
      HRESULT hr = getRawInterface()->ConvertFontToLOGFONT(font.getRawInterface(), &logFont, &isSystemFont);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGdiInterop::ConvertFontToLOGFONT");
      return std::make_tuple(std::move(logFont), std::move(isSystemFont != FALSE));
    }

    LOGFONTW GdiInterop::convertFontFaceToLOGFONT(DW::FontFace& font)
    {
      LOGFONTW logFont = LOGFONTW();
      HRESULT hr = getRawInterface()->ConvertFontFaceToLOGFONT(font.getRawInterface(), &logFont);
      if(FAILED(hr)) throw COMException(hr, "IDWriteGdiInterop::ConvertFontFaceToLOGFONT");
      return logFont;
    }

    DW::FontFamily FontCollection::getFontFamily(uint32_t index)
    {
      IDWriteFontFamily* fontFamily = nullptr;
      HRESULT hr = getRawInterface()->GetFontFamily(index, &fontFamily);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontCollection::GetFontFamily");
      return DW::FontFamily(fontFamily);
    }

    uint32_t FontCollection::getFontFamilyCount()
    {
      return getRawInterface()->GetFontFamilyCount();
    }

    DW::Font FontCollection::getFontFromFontFace(DW::FontFace& fontFace)
    {
      IDWriteFont* font = nullptr;
      HRESULT hr = getRawInterface()->GetFontFromFontFace(fontFace.getRawInterface(), &font);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontCollection::GetFontFromFontFace");
      return DW::Font(font);
    }

    std::tuple<uint32_t, bool> FontCollection::findFamilyName(const wchar_t* familyName)
    {
      uint32_t index = uint32_t();
      BOOL exists = BOOL();
      HRESULT hr = getRawInterface()->FindFamilyName(familyName, &index, &exists);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontCollection::FindFamilyName");
      return std::make_tuple(std::move(index), std::move(exists != FALSE));
    }

    DW::FontCollection FontList::getFontCollection()
    {
      IDWriteFontCollection* fontCollection = nullptr;
      HRESULT hr = getRawInterface()->GetFontCollection(&fontCollection);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontList::GetFontCollection");
      return DW::FontCollection(fontCollection);
    }

    DW::Font FontList::getFont(uint32_t index)
    {
      IDWriteFont* font = nullptr;
      HRESULT hr = getRawInterface()->GetFont(index, &font);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontList::GetFont");
      return DW::Font(font);
    }

    uint32_t FontList::getFontCount()
    {
      return getRawInterface()->GetFontCount();
    }

    DW::Font FontFamily::getFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style)
    {
      IDWriteFont* matchingFont = nullptr;
      HRESULT hr = getRawInterface()->GetFirstMatchingFont(weight, stretch, style, &matchingFont);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFamily::GetFirstMatchingFont");
      return DW::Font(matchingFont);
    }

    DW::FontList FontFamily::getMatchingFonts(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style)
    {
      IDWriteFontList* matchingFonts = nullptr;
      HRESULT hr = getRawInterface()->GetMatchingFonts(weight, stretch, style, &matchingFonts);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFamily::GetMatchingFonts");
      return DW::FontList(matchingFonts);
    }

    DW::LocalizedStrings FontFamily::getFamilyNames()
    {
      IDWriteLocalizedStrings* names = nullptr;
      HRESULT hr = getRawInterface()->GetFamilyNames(&names);
      if(FAILED(hr)) throw COMException(hr, "IDWriteFontFamily::GetFamilyNames");
      return DW::LocalizedStrings(names);
    }

  }
}
