#pragma once
// Autogenerated by nicify.lua -- do not edit by hand.
#include <wincodec.h>
#include "com.h"
namespace C6
{
  namespace WIC
  {
    class BitmapCodecInfo;
    class DevelopRaw;
    class PixelFormatInfo;
    class MetadataQueryWriter;
    class ColorContext;
    class FastMetadataEncoder;
    class Palette;
    class BitmapScaler;
    class BitmapFrameDecode;
    class BitmapSource;
    class BitmapCodecProgressNotification;
    class ProgressiveLevelControl;
    class BitmapDecoder;
    class Bitmap;
    class BitmapFrameEncode;
    class DevelopRawNotificationCallback;
    class BitmapLock;
    class ProgressCallback;
    class ImagingFactory;
    class ComponentInfo;
    class PixelFormatInfo2;
    class FormatConverterInfo;
    class ColorTransform;
    class MetadataQueryReader;
    class BitmapClipper;
    class BitmapEncoderInfo;
    class BitmapEncoder;
    class BitmapDecoderInfo;
    class BitmapSourceTransform;
    class FormatConverter;
    class Stream;
    class EnumMetadataItem;
    class BitmapFlipRotator;

    class Stream : public COMStream
    {
    public:
      // Constructors
      Stream() {}
      Stream(nullptr_t) {}
      explicit Stream(::IWICStream* raw) : COMStream(raw) {}
      Stream(const Stream& copy_from) : COMStream(copy_from) {}
      Stream(Stream&& move_from) : COMStream(std::move(move_from)) {}

      // Operators
      inline Stream& operator= (const Stream& copy_from) {COMStream::operator=(copy_from); return *this;}
      inline Stream& operator= (Stream&& move_from) {COMStream::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICStream* getRawInterface() {return static_cast<::IWICStream*>(COMStream::getRawInterface());}
      inline const ::IWICStream* getRawInterface() const {return static_cast<const ::IWICStream*>(COMStream::getRawInterface());}
      inline void swap(Stream& other) {COMStream::swap(other);}
      typedef ::IWICStream dumb_t;

      // Methods
      void initializeFromIStreamRegion(ULARGE_INTEGER ulOffset, ULARGE_INTEGER ulMaxSize);
      void initializeFromIStreamRegion(COMStream& pIStream, ULARGE_INTEGER ulOffset, ULARGE_INTEGER ulMaxSize);
      void initializeFromFilename(LPCWSTR wzFileName, DWORD dwDesiredAccess);

      template <typename WICInProcPointerContainer>
      void initializeFromMemory(WICInProcPointerContainer&& pbBuffer)
      {
        HRESULT hr = getRawInterface()->InitializeFromMemory(C6::internal::ecount<WICInProcPointerContainer>::data(pbBuffer), static_cast<DWORD>(C6::internal::ecount<WICInProcPointerContainer>::size(pbBuffer)));
        if(FAILED(hr)) throw COMException(hr, "IWICStream::InitializeFromMemory");
      }

      void initializeFromIStream();
      void initializeFromIStream(COMStream& pIStream);
    };

    class FastMetadataEncoder : public COMObject
    {
    public:
      // Constructors
      FastMetadataEncoder() {}
      FastMetadataEncoder(nullptr_t) {}
      explicit FastMetadataEncoder(::IWICFastMetadataEncoder* raw) : COMObject(raw) {}
      FastMetadataEncoder(const FastMetadataEncoder& copy_from) : COMObject(copy_from) {}
      FastMetadataEncoder(FastMetadataEncoder&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline FastMetadataEncoder& operator= (const FastMetadataEncoder& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline FastMetadataEncoder& operator= (FastMetadataEncoder&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICFastMetadataEncoder* getRawInterface() {return static_cast<::IWICFastMetadataEncoder*>(COMObject::getRawInterface());}
      inline const ::IWICFastMetadataEncoder* getRawInterface() const {return static_cast<const ::IWICFastMetadataEncoder*>(COMObject::getRawInterface());}
      inline void swap(FastMetadataEncoder& other) {COMObject::swap(other);}
      typedef ::IWICFastMetadataEncoder dumb_t;

      // Methods
      void commit();
      WIC::MetadataQueryWriter getMetadataQueryWriter();
    };

    class Palette : public COMObject
    {
    public:
      // Constructors
      Palette() {}
      Palette(nullptr_t) {}
      explicit Palette(::IWICPalette* raw) : COMObject(raw) {}
      Palette(const Palette& copy_from) : COMObject(copy_from) {}
      Palette(Palette&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline Palette& operator= (const Palette& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline Palette& operator= (Palette&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICPalette* getRawInterface() {return static_cast<::IWICPalette*>(COMObject::getRawInterface());}
      inline const ::IWICPalette* getRawInterface() const {return static_cast<const ::IWICPalette*>(COMObject::getRawInterface());}
      inline void swap(Palette& other) {COMObject::swap(other);}
      typedef ::IWICPalette dumb_t;

      // Methods
      void initializeFromPalette();
      void initializeFromPalette(WIC::Palette& pIPalette);

      template <typename WICColor_Container>
      void initializeCustom(WICColor_Container&& pColors)
      {
        HRESULT hr = getRawInterface()->InitializeCustom(C6::internal::ecount<WICColor_Container>::data(pColors), static_cast<unsigned int>(C6::internal::ecount<WICColor_Container>::size(pColors)));
        if(FAILED(hr)) throw COMException(hr, "IWICPalette::InitializeCustom");
      }

      bool isBlackWhite();
      bool hasAlpha();
      void initializeFromBitmap(unsigned int cCount, BOOL fAddTransparentColor);
      void initializeFromBitmap(WIC::BitmapSource& pISurface, unsigned int cCount, BOOL fAddTransparentColor);
      WICBitmapPaletteType getType();
      void initializePredefined(WICBitmapPaletteType ePaletteType, BOOL fAddTransparentColor);
      std::tuple<WICColor, unsigned int> getColors(unsigned int cCount);
      unsigned int getColorCount();
      bool isGrayscale();
    };

    class EnumMetadataItem : public COMObject
    {
    public:
      // Constructors
      EnumMetadataItem() {}
      EnumMetadataItem(nullptr_t) {}
      explicit EnumMetadataItem(::IWICEnumMetadataItem* raw) : COMObject(raw) {}
      EnumMetadataItem(const EnumMetadataItem& copy_from) : COMObject(copy_from) {}
      EnumMetadataItem(EnumMetadataItem&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline EnumMetadataItem& operator= (const EnumMetadataItem& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline EnumMetadataItem& operator= (EnumMetadataItem&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICEnumMetadataItem* getRawInterface() {return static_cast<::IWICEnumMetadataItem*>(COMObject::getRawInterface());}
      inline const ::IWICEnumMetadataItem* getRawInterface() const {return static_cast<const ::IWICEnumMetadataItem*>(COMObject::getRawInterface());}
      inline void swap(EnumMetadataItem& other) {COMObject::swap(other);}
      typedef ::IWICEnumMetadataItem dumb_t;

      // Methods
      void skip(ULONG celt);
      void reset();
      WIC::EnumMetadataItem clone();

      template <typename PROPVARIANT_Container, typename PROPVARIANT_Container2, typename PROPVARIANT_Container3>
      ULONG next(PROPVARIANT_Container&& rgeltSchema, PROPVARIANT_Container2&& rgeltId, PROPVARIANT_Container3&& rgeltValue)
      {
        ULONG pceltFetched = ULONG();
        HRESULT hr = getRawInterface()->Next((std::min)((std::min)(static_cast<ULONG>(C6::internal::ecount<PROPVARIANT_Container>::size(rgeltSchema)), static_cast<ULONG>(C6::internal::ecount<PROPVARIANT_Container2>::size(rgeltId))), static_cast<ULONG>(C6::internal::ecount<PROPVARIANT_Container3>::size(rgeltValue))), C6::internal::ecount<PROPVARIANT_Container>::data(rgeltSchema), C6::internal::ecount<PROPVARIANT_Container2>::data(rgeltId), C6::internal::ecount<PROPVARIANT_Container3>::data(rgeltValue), &pceltFetched);
        if(FAILED(hr)) throw COMException(hr, "IWICEnumMetadataItem::Next");
        return pceltFetched;
      }

    };

    class BitmapCodecProgressNotification : public COMObject
    {
    public:
      // Constructors
      BitmapCodecProgressNotification() {}
      BitmapCodecProgressNotification(nullptr_t) {}
      explicit BitmapCodecProgressNotification(::IWICBitmapCodecProgressNotification* raw) : COMObject(raw) {}
      BitmapCodecProgressNotification(const BitmapCodecProgressNotification& copy_from) : COMObject(copy_from) {}
      BitmapCodecProgressNotification(BitmapCodecProgressNotification&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapCodecProgressNotification& operator= (const BitmapCodecProgressNotification& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapCodecProgressNotification& operator= (BitmapCodecProgressNotification&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapCodecProgressNotification* getRawInterface() {return static_cast<::IWICBitmapCodecProgressNotification*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapCodecProgressNotification* getRawInterface() const {return static_cast<const ::IWICBitmapCodecProgressNotification*>(COMObject::getRawInterface());}
      inline void swap(BitmapCodecProgressNotification& other) {COMObject::swap(other);}
      typedef ::IWICBitmapCodecProgressNotification dumb_t;

      // Methods
      void registerProgressNotification(PFNProgressNotification pfnProgressNotification, LPVOID pvData, DWORD dwProgressFlags);
    };

    class ProgressiveLevelControl : public COMObject
    {
    public:
      // Constructors
      ProgressiveLevelControl() {}
      ProgressiveLevelControl(nullptr_t) {}
      explicit ProgressiveLevelControl(::IWICProgressiveLevelControl* raw) : COMObject(raw) {}
      ProgressiveLevelControl(const ProgressiveLevelControl& copy_from) : COMObject(copy_from) {}
      ProgressiveLevelControl(ProgressiveLevelControl&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline ProgressiveLevelControl& operator= (const ProgressiveLevelControl& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline ProgressiveLevelControl& operator= (ProgressiveLevelControl&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICProgressiveLevelControl* getRawInterface() {return static_cast<::IWICProgressiveLevelControl*>(COMObject::getRawInterface());}
      inline const ::IWICProgressiveLevelControl* getRawInterface() const {return static_cast<const ::IWICProgressiveLevelControl*>(COMObject::getRawInterface());}
      inline void swap(ProgressiveLevelControl& other) {COMObject::swap(other);}
      typedef ::IWICProgressiveLevelControl dumb_t;

      // Methods
      void setCurrentLevel(unsigned int nLevel);
      unsigned int getCurrentLevel();
      unsigned int getLevelCount();
    };

    class BitmapFrameEncode : public COMObject
    {
    public:
      // Constructors
      BitmapFrameEncode() {}
      BitmapFrameEncode(nullptr_t) {}
      explicit BitmapFrameEncode(::IWICBitmapFrameEncode* raw) : COMObject(raw) {}
      BitmapFrameEncode(const BitmapFrameEncode& copy_from) : COMObject(copy_from) {}
      BitmapFrameEncode(BitmapFrameEncode&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapFrameEncode& operator= (const BitmapFrameEncode& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapFrameEncode& operator= (BitmapFrameEncode&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapFrameEncode* getRawInterface() {return static_cast<::IWICBitmapFrameEncode*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapFrameEncode* getRawInterface() const {return static_cast<const ::IWICBitmapFrameEncode*>(COMObject::getRawInterface());}
      inline void swap(BitmapFrameEncode& other) {COMObject::swap(other);}
      typedef ::IWICBitmapFrameEncode dumb_t;

      // Methods
      void setPixelFormat(WICPixelFormatGUID* pPixelFormat);

      template <typename IWICColorContext__Container>
      void setColorContexts(IWICColorContext__Container&& ppIColorContext)
      {
        HRESULT hr = getRawInterface()->SetColorContexts(static_cast<unsigned int>(C6::internal::ecount<IWICColorContext__Container>::size(ppIColorContext)), C6::internal::ecount<IWICColorContext__Container>::data(ppIColorContext));
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::SetColorContexts");
      }

      WIC::MetadataQueryWriter getMetadataQueryWriter();
      void setPalette();
      void setPalette(WIC::Palette& pIPalette);
      void writeSource();
      void writeSource(WIC::BitmapSource& pIBitmapSource);
      void writeSource(WIC::BitmapSource& pIBitmapSource, WICRect* prc);

      template <typename BYTE_Container>
      void writePixels(unsigned int lineCount, unsigned int cbStride, BYTE_Container&& pbPixels)
      {
        HRESULT hr = getRawInterface()->WritePixels(lineCount, cbStride, static_cast<unsigned int>(C6::internal::ecount<BYTE_Container>::size(pbPixels)), C6::internal::ecount<BYTE_Container>::data(pbPixels));
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameEncode::WritePixels");
      }

      void initialize();
      void initialize(IPropertyBag2* pIEncoderOptions);
      void setSize(unsigned int uiWidth, unsigned int uiHeight);
      void commit();
      void setResolution(double dpiX, double dpiY);
      void setThumbnail();
      void setThumbnail(WIC::BitmapSource& pIThumbnail);
    };

    class DevelopRawNotificationCallback : public COMObject
    {
    public:
      // Constructors
      DevelopRawNotificationCallback() {}
      DevelopRawNotificationCallback(nullptr_t) {}
      explicit DevelopRawNotificationCallback(::IWICDevelopRawNotificationCallback* raw) : COMObject(raw) {}
      DevelopRawNotificationCallback(const DevelopRawNotificationCallback& copy_from) : COMObject(copy_from) {}
      DevelopRawNotificationCallback(DevelopRawNotificationCallback&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline DevelopRawNotificationCallback& operator= (const DevelopRawNotificationCallback& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline DevelopRawNotificationCallback& operator= (DevelopRawNotificationCallback&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICDevelopRawNotificationCallback* getRawInterface() {return static_cast<::IWICDevelopRawNotificationCallback*>(COMObject::getRawInterface());}
      inline const ::IWICDevelopRawNotificationCallback* getRawInterface() const {return static_cast<const ::IWICDevelopRawNotificationCallback*>(COMObject::getRawInterface());}
      inline void swap(DevelopRawNotificationCallback& other) {COMObject::swap(other);}
      typedef ::IWICDevelopRawNotificationCallback dumb_t;

      // Methods
      void notify(unsigned int NotificationMask);
    };

    class BitmapLock : public COMObject
    {
    public:
      // Constructors
      BitmapLock() {}
      BitmapLock(nullptr_t) {}
      explicit BitmapLock(::IWICBitmapLock* raw) : COMObject(raw) {}
      BitmapLock(const BitmapLock& copy_from) : COMObject(copy_from) {}
      BitmapLock(BitmapLock&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapLock& operator= (const BitmapLock& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapLock& operator= (BitmapLock&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapLock* getRawInterface() {return static_cast<::IWICBitmapLock*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapLock* getRawInterface() const {return static_cast<const ::IWICBitmapLock*>(COMObject::getRawInterface());}
      inline void swap(BitmapLock& other) {COMObject::swap(other);}
      typedef ::IWICBitmapLock dumb_t;

      // Methods
      std::tuple<unsigned int, unsigned int> getSize();
      unsigned int getStride();
      WICPixelFormatGUID getPixelFormat();
      std::tuple<unsigned int, WICInProcPointer> getDataPointer();
    };

    class ImagingFactory : public COMObject
    {
    public:
      // Constructors
      ImagingFactory() {}
      ImagingFactory(nullptr_t) {}
      explicit ImagingFactory(::IWICImagingFactory* raw) : COMObject(raw) {}
      ImagingFactory(const ImagingFactory& copy_from) : COMObject(copy_from) {}
      ImagingFactory(ImagingFactory&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline ImagingFactory& operator= (const ImagingFactory& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline ImagingFactory& operator= (ImagingFactory&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICImagingFactory* getRawInterface() {return static_cast<::IWICImagingFactory*>(COMObject::getRawInterface());}
      inline const ::IWICImagingFactory* getRawInterface() const {return static_cast<const ::IWICImagingFactory*>(COMObject::getRawInterface());}
      inline void swap(ImagingFactory& other) {COMObject::swap(other);}
      typedef ::IWICImagingFactory dumb_t;

      // Methods
      WIC::FastMetadataEncoder createFastMetadataEncoderFromFrameDecode();
      WIC::FastMetadataEncoder createFastMetadataEncoderFromFrameDecode(WIC::BitmapFrameDecode& pIFrameDecoder);
      WIC::BitmapFlipRotator createBitmapFlipRotator();
      WIC::MetadataQueryWriter createQueryWriterFromReader();
      WIC::MetadataQueryWriter createQueryWriterFromReader(WIC::MetadataQueryReader& pIQueryReader);
      WIC::MetadataQueryWriter createQueryWriterFromReader(WIC::MetadataQueryReader& pIQueryReader, const GUID& pguidVendor);
      WIC::BitmapDecoder createDecoderFromFileHandle(ULONG_PTR hFile, WICDecodeOptions metadataOptions);
      WIC::BitmapDecoder createDecoderFromFileHandle(ULONG_PTR hFile, const GUID& pguidVendor, WICDecodeOptions metadataOptions);
      WIC::ColorTransform createColorTransformer();
      IEnumUnknown* createComponentEnumerator(DWORD componentTypes, DWORD options);
      WIC::Palette createPalette();
      WIC::Bitmap createBitmapFromSource(WICBitmapCreateCacheOption option);
      WIC::Bitmap createBitmapFromSource(WIC::BitmapSource& pIBitmapSource, WICBitmapCreateCacheOption option);
      WIC::BitmapDecoder createDecoder(REFGUID guidContainerFormat);
      WIC::BitmapDecoder createDecoder(REFGUID guidContainerFormat, const GUID& pguidVendor);
      WIC::MetadataQueryWriter createQueryWriter(REFGUID guidMetadataFormat);
      WIC::MetadataQueryWriter createQueryWriter(REFGUID guidMetadataFormat, const GUID& pguidVendor);
      WIC::BitmapEncoder createEncoder(REFGUID guidContainerFormat);
      WIC::BitmapEncoder createEncoder(REFGUID guidContainerFormat, const GUID& pguidVendor);
      WIC::Bitmap createBitmapFromSourceRect(unsigned int x, unsigned int y, unsigned int width, unsigned int height);
      WIC::Bitmap createBitmapFromSourceRect(WIC::BitmapSource& pIBitmapSource, unsigned int x, unsigned int y, unsigned int width, unsigned int height);
      WIC::FastMetadataEncoder createFastMetadataEncoderFromDecoder();
      WIC::FastMetadataEncoder createFastMetadataEncoderFromDecoder(WIC::BitmapDecoder& pIDecoder);
      WIC::Stream createStream();
      WIC::BitmapScaler createBitmapScaler();
      WIC::BitmapDecoder createDecoderFromStream(WICDecodeOptions metadataOptions);
      WIC::BitmapDecoder createDecoderFromStream(COMStream& pIStream, WICDecodeOptions metadataOptions);
      WIC::BitmapDecoder createDecoderFromStream(COMStream& pIStream, const GUID& pguidVendor, WICDecodeOptions metadataOptions);
      WIC::BitmapClipper createBitmapClipper();
      WIC::BitmapDecoder createDecoderFromFilename(LPCWSTR wzFilename, DWORD dwDesiredAccess, WICDecodeOptions metadataOptions);
      WIC::BitmapDecoder createDecoderFromFilename(LPCWSTR wzFilename, const GUID& pguidVendor, DWORD dwDesiredAccess, WICDecodeOptions metadataOptions);
      WIC::Bitmap createBitmap(unsigned int uiWidth, unsigned int uiHeight, REFWICPixelFormatGUID pixelFormat, WICBitmapCreateCacheOption option);
      WIC::Bitmap createBitmapFromHICON(HICON hIcon);

      template <typename BYTE_Container>
      typename C6::internal::konst<WIC::Bitmap, BYTE_Container>::T createBitmapFromMemory(unsigned int uiWidth, unsigned int uiHeight, REFWICPixelFormatGUID pixelFormat, unsigned int cbStride, BYTE_Container&& pbBuffer)
      {
        IWICBitmap* ppIBitmap = nullptr;
        HRESULT hr = getRawInterface()->CreateBitmapFromMemory(uiWidth, uiHeight, pixelFormat, cbStride, static_cast<unsigned int>(C6::internal::ecount<BYTE_Container>::size(pbBuffer)), C6::internal::ecount<BYTE_Container>::data(pbBuffer), &ppIBitmap);
        if(FAILED(hr)) throw COMException(hr, "IWICImagingFactory::CreateBitmapFromMemory");
        return WIC::Bitmap(ppIBitmap);
      }

      WIC::ComponentInfo createComponentInfo(REFCLSID clsidComponent);
      WIC::FormatConverter createFormatConverter();
      WIC::ColorContext createColorContext();
      WIC::Bitmap createBitmapFromHBITMAP(HBITMAP hBitmap, HPALETTE hPalette, WICBitmapAlphaChannelOption options);
    };

    class BitmapSource : public COMObject
    {
    public:
      // Constructors
      BitmapSource() {}
      BitmapSource(nullptr_t) {}
      explicit BitmapSource(::IWICBitmapSource* raw) : COMObject(raw) {}
      BitmapSource(const BitmapSource& copy_from) : COMObject(copy_from) {}
      BitmapSource(BitmapSource&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapSource& operator= (const BitmapSource& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapSource& operator= (BitmapSource&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapSource* getRawInterface() {return static_cast<::IWICBitmapSource*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapSource* getRawInterface() const {return static_cast<const ::IWICBitmapSource*>(COMObject::getRawInterface());}
      inline void swap(BitmapSource& other) {COMObject::swap(other);}
      typedef ::IWICBitmapSource dumb_t;

      // Methods
      void copyPalette();
      void copyPalette(WIC::Palette& pIPalette);
      std::tuple<double, double> getResolution();
      BYTE copyPixels(unsigned int cbStride, unsigned int cbBufferSize);
      BYTE copyPixels(const WICRect& prc, unsigned int cbStride, unsigned int cbBufferSize);
      WICPixelFormatGUID getPixelFormat();
      std::tuple<unsigned int, unsigned int> getSize();
    };

    class BitmapFrameDecode : public WIC::BitmapSource
    {
    public:
      // Constructors
      BitmapFrameDecode() {}
      BitmapFrameDecode(nullptr_t) {}
      explicit BitmapFrameDecode(::IWICBitmapFrameDecode* raw) : WIC::BitmapSource(raw) {}
      BitmapFrameDecode(const BitmapFrameDecode& copy_from) : WIC::BitmapSource(copy_from) {}
      BitmapFrameDecode(BitmapFrameDecode&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline BitmapFrameDecode& operator= (const BitmapFrameDecode& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline BitmapFrameDecode& operator= (BitmapFrameDecode&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapFrameDecode* getRawInterface() {return static_cast<::IWICBitmapFrameDecode*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICBitmapFrameDecode* getRawInterface() const {return static_cast<const ::IWICBitmapFrameDecode*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(BitmapFrameDecode& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICBitmapFrameDecode dumb_t;

      // Methods
      WIC::MetadataQueryReader getMetadataQueryReader();

      template <typename IWICColorContext__Container>
      unsigned int getColorContexts(IWICColorContext__Container&& ppIColorContexts)
      {
        unsigned int pcActualCount = unsigned int();
        HRESULT hr = getRawInterface()->GetColorContexts(static_cast<unsigned int>(C6::internal::ecount<IWICColorContext__Container>::size(ppIColorContexts)), C6::internal::ecount<IWICColorContext__Container>::data(ppIColorContexts), &pcActualCount);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapFrameDecode::GetColorContexts");
        return pcActualCount;
      }

      WIC::BitmapSource getThumbnail();
    };

    class DevelopRaw : public WIC::BitmapFrameDecode
    {
    public:
      // Constructors
      DevelopRaw() {}
      DevelopRaw(nullptr_t) {}
      explicit DevelopRaw(::IWICDevelopRaw* raw) : WIC::BitmapFrameDecode(raw) {}
      DevelopRaw(const DevelopRaw& copy_from) : WIC::BitmapFrameDecode(copy_from) {}
      DevelopRaw(DevelopRaw&& move_from) : WIC::BitmapFrameDecode(std::move(move_from)) {}

      // Operators
      inline DevelopRaw& operator= (const DevelopRaw& copy_from) {WIC::BitmapFrameDecode::operator=(copy_from); return *this;}
      inline DevelopRaw& operator= (DevelopRaw&& move_from) {WIC::BitmapFrameDecode::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICDevelopRaw* getRawInterface() {return static_cast<::IWICDevelopRaw*>(WIC::BitmapFrameDecode::getRawInterface());}
      inline const ::IWICDevelopRaw* getRawInterface() const {return static_cast<const ::IWICDevelopRaw*>(WIC::BitmapFrameDecode::getRawInterface());}
      inline void swap(DevelopRaw& other) {WIC::BitmapFrameDecode::swap(other);}
      typedef ::IWICDevelopRaw dumb_t;

      // Methods
      WICNamedWhitePoint getNamedWhitePoint();
      std::tuple<unsigned int, unsigned int, unsigned int> getKelvinRangeInfo();
      void setWhitePointKelvin(unsigned int WhitePointKelvin);
      double getContrast();
      void setGamma(double Gamma);
      double getRotation();
      void setNoiseReduction(double NoiseReduction);
      void setExposureCompensation(double ev);
      void setTint(double Tint);
      void setSharpness(double Sharpness);
      WICRawRenderMode getRenderMode();
      void setRotation(double Rotation);
      void getToneCurve(unsigned int cbToneCurveBufferSize, WICRawToneCurve* pToneCurve, unsigned int* pcbActualToneCurveBufferSize);
      IPropertyBag2* getCurrentParameterSet();
      unsigned int getWhitePointKelvin();
      double getSaturation();
      void setToneCurve();

      template <typename const_WICRawToneCurve_Container>
      void setToneCurve(const_WICRawToneCurve_Container&& pToneCurve)
      {
        HRESULT hr = getRawInterface()->SetToneCurve(static_cast<unsigned int>(C6::internal::ecount<const_WICRawToneCurve_Container>::size(pToneCurve) * C6::internal::bcount<decltype(pToneCurve.data())>::elem_size), C6::internal::ecount<const_WICRawToneCurve_Container>::data(pToneCurve));
        if(FAILED(hr)) throw COMException(hr, "IWICDevelopRaw::SetToneCurve");
      }

      void queryRawCapabilitiesInfo(WICRawCapabilitiesInfo* pInfo);
      double getNoiseReduction();
      double getExposureCompensation();
      std::tuple<unsigned int, unsigned int, unsigned int> getWhitePointRGB();
      void setDestinationColorContext();
      void setDestinationColorContext(WIC::ColorContext& pColorContext);
      void loadParameterSet(WICRawParameterSet ParameterSet);
      double getGamma();
      void setWhitePointRGB(unsigned int Red, unsigned int Green, unsigned int Blue);
      void setNamedWhitePoint(WICNamedWhitePoint WhitePoint);
      void setSaturation(double Saturation);
      void setNotificationCallback();
      void setNotificationCallback(WIC::DevelopRawNotificationCallback& pCallback);
      double getTint();
      double getSharpness();
      void setRenderMode(WICRawRenderMode RenderMode);
      void setContrast(double Contrast);
    };

    class BitmapClipper : public WIC::BitmapSource
    {
    public:
      // Constructors
      BitmapClipper() {}
      BitmapClipper(nullptr_t) {}
      explicit BitmapClipper(::IWICBitmapClipper* raw) : WIC::BitmapSource(raw) {}
      BitmapClipper(const BitmapClipper& copy_from) : WIC::BitmapSource(copy_from) {}
      BitmapClipper(BitmapClipper&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline BitmapClipper& operator= (const BitmapClipper& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline BitmapClipper& operator= (BitmapClipper&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapClipper* getRawInterface() {return static_cast<::IWICBitmapClipper*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICBitmapClipper* getRawInterface() const {return static_cast<const ::IWICBitmapClipper*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(BitmapClipper& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICBitmapClipper dumb_t;

      // Methods
      void initialize(const WICRect& prc);
      void initialize(WIC::BitmapSource& pISource, const WICRect& prc);
    };

    class BitmapFlipRotator : public WIC::BitmapSource
    {
    public:
      // Constructors
      BitmapFlipRotator() {}
      BitmapFlipRotator(nullptr_t) {}
      explicit BitmapFlipRotator(::IWICBitmapFlipRotator* raw) : WIC::BitmapSource(raw) {}
      BitmapFlipRotator(const BitmapFlipRotator& copy_from) : WIC::BitmapSource(copy_from) {}
      BitmapFlipRotator(BitmapFlipRotator&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline BitmapFlipRotator& operator= (const BitmapFlipRotator& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline BitmapFlipRotator& operator= (BitmapFlipRotator&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapFlipRotator* getRawInterface() {return static_cast<::IWICBitmapFlipRotator*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICBitmapFlipRotator* getRawInterface() const {return static_cast<const ::IWICBitmapFlipRotator*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(BitmapFlipRotator& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICBitmapFlipRotator dumb_t;

      // Methods
      void initialize(WICBitmapTransformOptions options);
      void initialize(WIC::BitmapSource& pISource, WICBitmapTransformOptions options);
    };

    class FormatConverter : public WIC::BitmapSource
    {
    public:
      // Constructors
      FormatConverter() {}
      FormatConverter(nullptr_t) {}
      explicit FormatConverter(::IWICFormatConverter* raw) : WIC::BitmapSource(raw) {}
      FormatConverter(const FormatConverter& copy_from) : WIC::BitmapSource(copy_from) {}
      FormatConverter(FormatConverter&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline FormatConverter& operator= (const FormatConverter& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline FormatConverter& operator= (FormatConverter&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICFormatConverter* getRawInterface() {return static_cast<::IWICFormatConverter*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICFormatConverter* getRawInterface() const {return static_cast<const ::IWICFormatConverter*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(FormatConverter& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICFormatConverter dumb_t;

      // Methods
      bool canConvert(REFWICPixelFormatGUID srcPixelFormat, REFWICPixelFormatGUID dstPixelFormat);
      void initialize(REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);
      void initialize(WIC::BitmapSource& pISource, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);
      void initialize(WIC::BitmapSource& pISource, REFWICPixelFormatGUID dstFormat, WICBitmapDitherType dither, WIC::Palette& pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);
    };

    class ColorTransform : public WIC::BitmapSource
    {
    public:
      // Constructors
      ColorTransform() {}
      ColorTransform(nullptr_t) {}
      explicit ColorTransform(::IWICColorTransform* raw) : WIC::BitmapSource(raw) {}
      ColorTransform(const ColorTransform& copy_from) : WIC::BitmapSource(copy_from) {}
      ColorTransform(ColorTransform&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline ColorTransform& operator= (const ColorTransform& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline ColorTransform& operator= (ColorTransform&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICColorTransform* getRawInterface() {return static_cast<::IWICColorTransform*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICColorTransform* getRawInterface() const {return static_cast<const ::IWICColorTransform*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(ColorTransform& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICColorTransform dumb_t;

      // Methods
      void initialize(REFWICPixelFormatGUID pixelFmtDest);
      void initialize(WIC::BitmapSource& pIBitmapSource, REFWICPixelFormatGUID pixelFmtDest);
      void initialize(WIC::BitmapSource& pIBitmapSource, WIC::ColorContext& pIContextSource, REFWICPixelFormatGUID pixelFmtDest);
      void initialize(WIC::BitmapSource& pIBitmapSource, WIC::ColorContext& pIContextSource, WIC::ColorContext& pIContextDest, REFWICPixelFormatGUID pixelFmtDest);
    };

    class Bitmap : public WIC::BitmapSource
    {
    public:
      // Constructors
      Bitmap() {}
      Bitmap(nullptr_t) {}
      explicit Bitmap(::IWICBitmap* raw) : WIC::BitmapSource(raw) {}
      Bitmap(const Bitmap& copy_from) : WIC::BitmapSource(copy_from) {}
      Bitmap(Bitmap&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline Bitmap& operator= (const Bitmap& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline Bitmap& operator= (Bitmap&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmap* getRawInterface() {return static_cast<::IWICBitmap*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICBitmap* getRawInterface() const {return static_cast<const ::IWICBitmap*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(Bitmap& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICBitmap dumb_t;

      // Methods
      void setPalette();
      void setPalette(WIC::Palette& pIPalette);
      void setResolution(double dpiX, double dpiY);
      WIC::BitmapLock lock(DWORD flags);
      WIC::BitmapLock lock(const WICRect& prcLock, DWORD flags);
    };

    class BitmapScaler : public WIC::BitmapSource
    {
    public:
      // Constructors
      BitmapScaler() {}
      BitmapScaler(nullptr_t) {}
      explicit BitmapScaler(::IWICBitmapScaler* raw) : WIC::BitmapSource(raw) {}
      BitmapScaler(const BitmapScaler& copy_from) : WIC::BitmapSource(copy_from) {}
      BitmapScaler(BitmapScaler&& move_from) : WIC::BitmapSource(std::move(move_from)) {}

      // Operators
      inline BitmapScaler& operator= (const BitmapScaler& copy_from) {WIC::BitmapSource::operator=(copy_from); return *this;}
      inline BitmapScaler& operator= (BitmapScaler&& move_from) {WIC::BitmapSource::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapScaler* getRawInterface() {return static_cast<::IWICBitmapScaler*>(WIC::BitmapSource::getRawInterface());}
      inline const ::IWICBitmapScaler* getRawInterface() const {return static_cast<const ::IWICBitmapScaler*>(WIC::BitmapSource::getRawInterface());}
      inline void swap(BitmapScaler& other) {WIC::BitmapSource::swap(other);}
      typedef ::IWICBitmapScaler dumb_t;

      // Methods
      void initialize(unsigned int uiWidth, unsigned int uiHeight, WICBitmapInterpolationMode mode);
      void initialize(WIC::BitmapSource& pISource, unsigned int uiWidth, unsigned int uiHeight, WICBitmapInterpolationMode mode);
    };

    class BitmapEncoder : public COMObject
    {
    public:
      // Constructors
      BitmapEncoder() {}
      BitmapEncoder(nullptr_t) {}
      explicit BitmapEncoder(::IWICBitmapEncoder* raw) : COMObject(raw) {}
      BitmapEncoder(const BitmapEncoder& copy_from) : COMObject(copy_from) {}
      BitmapEncoder(BitmapEncoder&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapEncoder& operator= (const BitmapEncoder& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapEncoder& operator= (BitmapEncoder&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapEncoder* getRawInterface() {return static_cast<::IWICBitmapEncoder*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapEncoder* getRawInterface() const {return static_cast<const ::IWICBitmapEncoder*>(COMObject::getRawInterface());}
      inline void swap(BitmapEncoder& other) {COMObject::swap(other);}
      typedef ::IWICBitmapEncoder dumb_t;

      // Methods

      template <typename IWICColorContext__Container>
      void setColorContexts(IWICColorContext__Container&& ppIColorContext)
      {
        HRESULT hr = getRawInterface()->SetColorContexts(static_cast<unsigned int>(C6::internal::ecount<IWICColorContext__Container>::size(ppIColorContext)), C6::internal::ecount<IWICColorContext__Container>::data(ppIColorContext));
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapEncoder::SetColorContexts");
      }

      WIC::MetadataQueryWriter getMetadataQueryWriter();
      void setPalette();
      void setPalette(WIC::Palette& pIPalette);
      WIC::BitmapEncoderInfo getEncoderInfo();
      void commit();
      GUID getContainerFormat();
      void initialize(WICBitmapEncoderCacheOption cacheOption);
      void initialize(COMStream& pIStream, WICBitmapEncoderCacheOption cacheOption);
      WIC::BitmapFrameEncode createNewFrame(IPropertyBag2** ppIEncoderOptions);
      void setPreview();
      void setPreview(WIC::BitmapSource& pIPreview);
      void setThumbnail();
      void setThumbnail(WIC::BitmapSource& pIThumbnail);
    };

    class BitmapDecoder : public COMObject
    {
    public:
      // Constructors
      BitmapDecoder() {}
      BitmapDecoder(nullptr_t) {}
      explicit BitmapDecoder(::IWICBitmapDecoder* raw) : COMObject(raw) {}
      BitmapDecoder(const BitmapDecoder& copy_from) : COMObject(copy_from) {}
      BitmapDecoder(BitmapDecoder&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapDecoder& operator= (const BitmapDecoder& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapDecoder& operator= (BitmapDecoder&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapDecoder* getRawInterface() {return static_cast<::IWICBitmapDecoder*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapDecoder* getRawInterface() const {return static_cast<const ::IWICBitmapDecoder*>(COMObject::getRawInterface());}
      inline void swap(BitmapDecoder& other) {COMObject::swap(other);}
      typedef ::IWICBitmapDecoder dumb_t;

      // Methods
      void copyPalette();
      void copyPalette(WIC::Palette& pIPalette);
      WIC::BitmapSource getPreview();
      WIC::BitmapFrameDecode getFrame(unsigned int index);
      unsigned int getFrameCount();
      WIC::BitmapDecoderInfo getDecoderInfo();
      GUID getContainerFormat();
      void initialize(WICDecodeOptions cacheOptions);
      void initialize(COMStream& pIStream, WICDecodeOptions cacheOptions);
      WIC::BitmapSource getThumbnail();
      DWORD queryCapability();
      DWORD queryCapability(COMStream& pIStream);

      template <typename IWICColorContext__Container>
      unsigned int getColorContexts(IWICColorContext__Container&& ppIColorContexts)
      {
        unsigned int pcActualCount = unsigned int();
        HRESULT hr = getRawInterface()->GetColorContexts(static_cast<unsigned int>(C6::internal::ecount<IWICColorContext__Container>::size(ppIColorContexts)), C6::internal::ecount<IWICColorContext__Container>::data(ppIColorContexts), &pcActualCount);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapDecoder::GetColorContexts");
        return pcActualCount;
      }

      WIC::MetadataQueryReader getMetadataQueryReader();
    };

    class ColorContext : public COMObject
    {
    public:
      // Constructors
      ColorContext() {}
      ColorContext(nullptr_t) {}
      explicit ColorContext(::IWICColorContext* raw) : COMObject(raw) {}
      ColorContext(const ColorContext& copy_from) : COMObject(copy_from) {}
      ColorContext(ColorContext&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline ColorContext& operator= (const ColorContext& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline ColorContext& operator= (ColorContext&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICColorContext* getRawInterface() {return static_cast<::IWICColorContext*>(COMObject::getRawInterface());}
      inline const ::IWICColorContext* getRawInterface() const {return static_cast<const ::IWICColorContext*>(COMObject::getRawInterface());}
      inline void swap(ColorContext& other) {COMObject::swap(other);}
      typedef ::IWICColorContext dumb_t;

      // Methods
      void initializeFromExifColorSpace(unsigned int value);

      template <typename const_BYTE_Container>
      void initializeFromMemory(const_BYTE_Container&& pbBuffer)
      {
        HRESULT hr = getRawInterface()->InitializeFromMemory(C6::internal::ecount<const_BYTE_Container>::data(pbBuffer), static_cast<unsigned int>(C6::internal::ecount<const_BYTE_Container>::size(pbBuffer)));
        if(FAILED(hr)) throw COMException(hr, "IWICColorContext::InitializeFromMemory");
      }

      WICColorContextType getType();
      void initializeFromFilename(LPCWSTR wzFilename);
      unsigned int getExifColorSpace();

      template <typename BYTE_Container>
      unsigned int getProfileBytes(BYTE_Container&& pbBuffer)
      {
        unsigned int pcbActual = unsigned int();
        HRESULT hr = getRawInterface()->GetProfileBytes(static_cast<unsigned int>(C6::internal::ecount<BYTE_Container>::size(pbBuffer)), C6::internal::ecount<BYTE_Container>::data(pbBuffer), &pcbActual);
        if(FAILED(hr)) throw COMException(hr, "IWICColorContext::GetProfileBytes");
        return pcbActual;
      }

    };

    class ComponentInfo : public COMObject
    {
    public:
      // Constructors
      ComponentInfo() {}
      ComponentInfo(nullptr_t) {}
      explicit ComponentInfo(::IWICComponentInfo* raw) : COMObject(raw) {}
      ComponentInfo(const ComponentInfo& copy_from) : COMObject(copy_from) {}
      ComponentInfo(ComponentInfo&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline ComponentInfo& operator= (const ComponentInfo& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline ComponentInfo& operator= (ComponentInfo&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICComponentInfo* getRawInterface() {return static_cast<::IWICComponentInfo*>(COMObject::getRawInterface());}
      inline const ::IWICComponentInfo* getRawInterface() const {return static_cast<const ::IWICComponentInfo*>(COMObject::getRawInterface());}
      inline void swap(ComponentInfo& other) {COMObject::swap(other);}
      typedef ::IWICComponentInfo dumb_t;

      // Methods

      template <typename wchar_t_Container>
      unsigned int getFriendlyName(wchar_t_Container&& wzFriendlyName)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetFriendlyName(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzFriendlyName)), C6::internal::ecount<wchar_t_Container>::data(wzFriendlyName), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetFriendlyName");
        return pcchActual;
      }

      GUID getVendorGUID();
      CLSID getCLSID();

      template <typename wchar_t_Container>
      unsigned int getAuthor(wchar_t_Container&& wzAuthor)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetAuthor(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzAuthor)), C6::internal::ecount<wchar_t_Container>::data(wzAuthor), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetAuthor");
        return pcchActual;
      }

      WICComponentType getComponentType();

      template <typename wchar_t_Container>
      unsigned int getSpecVersion(wchar_t_Container&& wzSpecVersion)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetSpecVersion(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzSpecVersion)), C6::internal::ecount<wchar_t_Container>::data(wzSpecVersion), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetSpecVersion");
        return pcchActual;
      }

      DWORD getSigningStatus();

      template <typename wchar_t_Container>
      unsigned int getVersion(wchar_t_Container&& wzVersion)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetVersion(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzVersion)), C6::internal::ecount<wchar_t_Container>::data(wzVersion), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICComponentInfo::GetVersion");
        return pcchActual;
      }

    };

    class FormatConverterInfo : public WIC::ComponentInfo
    {
    public:
      // Constructors
      FormatConverterInfo() {}
      FormatConverterInfo(nullptr_t) {}
      explicit FormatConverterInfo(::IWICFormatConverterInfo* raw) : WIC::ComponentInfo(raw) {}
      FormatConverterInfo(const FormatConverterInfo& copy_from) : WIC::ComponentInfo(copy_from) {}
      FormatConverterInfo(FormatConverterInfo&& move_from) : WIC::ComponentInfo(std::move(move_from)) {}

      // Operators
      inline FormatConverterInfo& operator= (const FormatConverterInfo& copy_from) {WIC::ComponentInfo::operator=(copy_from); return *this;}
      inline FormatConverterInfo& operator= (FormatConverterInfo&& move_from) {WIC::ComponentInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICFormatConverterInfo* getRawInterface() {return static_cast<::IWICFormatConverterInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline const ::IWICFormatConverterInfo* getRawInterface() const {return static_cast<const ::IWICFormatConverterInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline void swap(FormatConverterInfo& other) {WIC::ComponentInfo::swap(other);}
      typedef ::IWICFormatConverterInfo dumb_t;

      // Methods
      WIC::FormatConverter createInstance();

      template <typename WICPixelFormatGUID_Container>
      unsigned int getPixelFormats(WICPixelFormatGUID_Container&& pPixelFormatGUIDs)
      {
        unsigned int pcActual = unsigned int();
        HRESULT hr = getRawInterface()->GetPixelFormats(static_cast<unsigned int>(C6::internal::ecount<WICPixelFormatGUID_Container>::size(pPixelFormatGUIDs)), C6::internal::ecount<WICPixelFormatGUID_Container>::data(pPixelFormatGUIDs), &pcActual);
        if(FAILED(hr)) throw COMException(hr, "IWICFormatConverterInfo::GetPixelFormats");
        return pcActual;
      }

    };

    class PixelFormatInfo : public WIC::ComponentInfo
    {
    public:
      // Constructors
      PixelFormatInfo() {}
      PixelFormatInfo(nullptr_t) {}
      explicit PixelFormatInfo(::IWICPixelFormatInfo* raw) : WIC::ComponentInfo(raw) {}
      PixelFormatInfo(const PixelFormatInfo& copy_from) : WIC::ComponentInfo(copy_from) {}
      PixelFormatInfo(PixelFormatInfo&& move_from) : WIC::ComponentInfo(std::move(move_from)) {}

      // Operators
      inline PixelFormatInfo& operator= (const PixelFormatInfo& copy_from) {WIC::ComponentInfo::operator=(copy_from); return *this;}
      inline PixelFormatInfo& operator= (PixelFormatInfo&& move_from) {WIC::ComponentInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICPixelFormatInfo* getRawInterface() {return static_cast<::IWICPixelFormatInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline const ::IWICPixelFormatInfo* getRawInterface() const {return static_cast<const ::IWICPixelFormatInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline void swap(PixelFormatInfo& other) {WIC::ComponentInfo::swap(other);}
      typedef ::IWICPixelFormatInfo dumb_t;

      // Methods
      unsigned int getChannelCount();
      unsigned int getBitsPerPixel();

      template <typename BYTE_Container>
      unsigned int getChannelMask(unsigned int uiChannelIndex, BYTE_Container&& pbMaskBuffer)
      {
        unsigned int pcbActual = unsigned int();
        HRESULT hr = getRawInterface()->GetChannelMask(uiChannelIndex, static_cast<unsigned int>(C6::internal::ecount<BYTE_Container>::size(pbMaskBuffer)), C6::internal::ecount<BYTE_Container>::data(pbMaskBuffer), &pcbActual);
        if(FAILED(hr)) throw COMException(hr, "IWICPixelFormatInfo::GetChannelMask");
        return pcbActual;
      }

      WIC::ColorContext getColorContext();
      GUID getFormatGUID();
    };

    class PixelFormatInfo2 : public WIC::PixelFormatInfo
    {
    public:
      // Constructors
      PixelFormatInfo2() {}
      PixelFormatInfo2(nullptr_t) {}
      explicit PixelFormatInfo2(::IWICPixelFormatInfo2* raw) : WIC::PixelFormatInfo(raw) {}
      PixelFormatInfo2(const PixelFormatInfo2& copy_from) : WIC::PixelFormatInfo(copy_from) {}
      PixelFormatInfo2(PixelFormatInfo2&& move_from) : WIC::PixelFormatInfo(std::move(move_from)) {}

      // Operators
      inline PixelFormatInfo2& operator= (const PixelFormatInfo2& copy_from) {WIC::PixelFormatInfo::operator=(copy_from); return *this;}
      inline PixelFormatInfo2& operator= (PixelFormatInfo2&& move_from) {WIC::PixelFormatInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICPixelFormatInfo2* getRawInterface() {return static_cast<::IWICPixelFormatInfo2*>(WIC::PixelFormatInfo::getRawInterface());}
      inline const ::IWICPixelFormatInfo2* getRawInterface() const {return static_cast<const ::IWICPixelFormatInfo2*>(WIC::PixelFormatInfo::getRawInterface());}
      inline void swap(PixelFormatInfo2& other) {WIC::PixelFormatInfo::swap(other);}
      typedef ::IWICPixelFormatInfo2 dumb_t;

      // Methods
      bool supportsTransparency();
      WICPixelFormatNumericRepresentation getNumericRepresentation();
    };

    class BitmapCodecInfo : public WIC::ComponentInfo
    {
    public:
      // Constructors
      BitmapCodecInfo() {}
      BitmapCodecInfo(nullptr_t) {}
      explicit BitmapCodecInfo(::IWICBitmapCodecInfo* raw) : WIC::ComponentInfo(raw) {}
      BitmapCodecInfo(const BitmapCodecInfo& copy_from) : WIC::ComponentInfo(copy_from) {}
      BitmapCodecInfo(BitmapCodecInfo&& move_from) : WIC::ComponentInfo(std::move(move_from)) {}

      // Operators
      inline BitmapCodecInfo& operator= (const BitmapCodecInfo& copy_from) {WIC::ComponentInfo::operator=(copy_from); return *this;}
      inline BitmapCodecInfo& operator= (BitmapCodecInfo&& move_from) {WIC::ComponentInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapCodecInfo* getRawInterface() {return static_cast<::IWICBitmapCodecInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline const ::IWICBitmapCodecInfo* getRawInterface() const {return static_cast<const ::IWICBitmapCodecInfo*>(WIC::ComponentInfo::getRawInterface());}
      inline void swap(BitmapCodecInfo& other) {WIC::ComponentInfo::swap(other);}
      typedef ::IWICBitmapCodecInfo dumb_t;

      // Methods
      bool doesSupportLossless();

      template <typename GUID_Container>
      unsigned int getPixelFormats(GUID_Container&& pguidPixelFormats)
      {
        unsigned int pcActual = unsigned int();
        HRESULT hr = getRawInterface()->GetPixelFormats(static_cast<unsigned int>(C6::internal::ecount<GUID_Container>::size(pguidPixelFormats)), C6::internal::ecount<GUID_Container>::data(pguidPixelFormats), &pcActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetPixelFormats");
        return pcActual;
      }

      bool doesSupportMultiframe();

      template <typename wchar_t_Container>
      unsigned int getColorManagementVersion(wchar_t_Container&& wzColorManagementVersion)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetColorManagementVersion(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzColorManagementVersion)), C6::internal::ecount<wchar_t_Container>::data(wzColorManagementVersion), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetColorManagementVersion");
        return pcchActual;
      }

      bool matchesMimeType(LPCWSTR wzMimeType);
      bool doesSupportChromakey();
      GUID getContainerFormat();

      template <typename wchar_t_Container>
      unsigned int getMimeTypes(wchar_t_Container&& wzMimeTypes)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetMimeTypes(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzMimeTypes)), C6::internal::ecount<wchar_t_Container>::data(wzMimeTypes), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetMimeTypes");
        return pcchActual;
      }


      template <typename wchar_t_Container>
      unsigned int getDeviceModels(wchar_t_Container&& wzDeviceModels)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetDeviceModels(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzDeviceModels)), C6::internal::ecount<wchar_t_Container>::data(wzDeviceModels), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetDeviceModels");
        return pcchActual;
      }

      bool doesSupportAnimation();

      template <typename wchar_t_Container>
      unsigned int getFileExtensions(wchar_t_Container&& wzFileExtensions)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetFileExtensions(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzFileExtensions)), C6::internal::ecount<wchar_t_Container>::data(wzFileExtensions), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetFileExtensions");
        return pcchActual;
      }


      template <typename wchar_t_Container>
      unsigned int getDeviceManufacturer(wchar_t_Container&& wzDeviceManufacturer)
      {
        unsigned int pcchActual = unsigned int();
        HRESULT hr = getRawInterface()->GetDeviceManufacturer(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzDeviceManufacturer)), C6::internal::ecount<wchar_t_Container>::data(wzDeviceManufacturer), &pcchActual);
        if(FAILED(hr)) throw COMException(hr, "IWICBitmapCodecInfo::GetDeviceManufacturer");
        return pcchActual;
      }

    };

    class BitmapEncoderInfo : public WIC::BitmapCodecInfo
    {
    public:
      // Constructors
      BitmapEncoderInfo() {}
      BitmapEncoderInfo(nullptr_t) {}
      explicit BitmapEncoderInfo(::IWICBitmapEncoderInfo* raw) : WIC::BitmapCodecInfo(raw) {}
      BitmapEncoderInfo(const BitmapEncoderInfo& copy_from) : WIC::BitmapCodecInfo(copy_from) {}
      BitmapEncoderInfo(BitmapEncoderInfo&& move_from) : WIC::BitmapCodecInfo(std::move(move_from)) {}

      // Operators
      inline BitmapEncoderInfo& operator= (const BitmapEncoderInfo& copy_from) {WIC::BitmapCodecInfo::operator=(copy_from); return *this;}
      inline BitmapEncoderInfo& operator= (BitmapEncoderInfo&& move_from) {WIC::BitmapCodecInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapEncoderInfo* getRawInterface() {return static_cast<::IWICBitmapEncoderInfo*>(WIC::BitmapCodecInfo::getRawInterface());}
      inline const ::IWICBitmapEncoderInfo* getRawInterface() const {return static_cast<const ::IWICBitmapEncoderInfo*>(WIC::BitmapCodecInfo::getRawInterface());}
      inline void swap(BitmapEncoderInfo& other) {WIC::BitmapCodecInfo::swap(other);}
      typedef ::IWICBitmapEncoderInfo dumb_t;

      // Methods
      WIC::BitmapEncoder createInstance();
    };

    class BitmapDecoderInfo : public WIC::BitmapCodecInfo
    {
    public:
      // Constructors
      BitmapDecoderInfo() {}
      BitmapDecoderInfo(nullptr_t) {}
      explicit BitmapDecoderInfo(::IWICBitmapDecoderInfo* raw) : WIC::BitmapCodecInfo(raw) {}
      BitmapDecoderInfo(const BitmapDecoderInfo& copy_from) : WIC::BitmapCodecInfo(copy_from) {}
      BitmapDecoderInfo(BitmapDecoderInfo&& move_from) : WIC::BitmapCodecInfo(std::move(move_from)) {}

      // Operators
      inline BitmapDecoderInfo& operator= (const BitmapDecoderInfo& copy_from) {WIC::BitmapCodecInfo::operator=(copy_from); return *this;}
      inline BitmapDecoderInfo& operator= (BitmapDecoderInfo&& move_from) {WIC::BitmapCodecInfo::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapDecoderInfo* getRawInterface() {return static_cast<::IWICBitmapDecoderInfo*>(WIC::BitmapCodecInfo::getRawInterface());}
      inline const ::IWICBitmapDecoderInfo* getRawInterface() const {return static_cast<const ::IWICBitmapDecoderInfo*>(WIC::BitmapCodecInfo::getRawInterface());}
      inline void swap(BitmapDecoderInfo& other) {WIC::BitmapCodecInfo::swap(other);}
      typedef ::IWICBitmapDecoderInfo dumb_t;

      // Methods
      void getPatterns(unsigned int cbSizePatterns, WICBitmapPattern* pPatterns, unsigned int* pcPatterns, unsigned int* pcbPatternsActual);
      WIC::BitmapDecoder createInstance();
      bool matchesPattern();
      bool matchesPattern(COMStream& pIStream);
    };

    class BitmapSourceTransform : public COMObject
    {
    public:
      // Constructors
      BitmapSourceTransform() {}
      BitmapSourceTransform(nullptr_t) {}
      explicit BitmapSourceTransform(::IWICBitmapSourceTransform* raw) : COMObject(raw) {}
      BitmapSourceTransform(const BitmapSourceTransform& copy_from) : COMObject(copy_from) {}
      BitmapSourceTransform(BitmapSourceTransform&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline BitmapSourceTransform& operator= (const BitmapSourceTransform& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline BitmapSourceTransform& operator= (BitmapSourceTransform&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICBitmapSourceTransform* getRawInterface() {return static_cast<::IWICBitmapSourceTransform*>(COMObject::getRawInterface());}
      inline const ::IWICBitmapSourceTransform* getRawInterface() const {return static_cast<const ::IWICBitmapSourceTransform*>(COMObject::getRawInterface());}
      inline void swap(BitmapSourceTransform& other) {COMObject::swap(other);}
      typedef ::IWICBitmapSourceTransform dumb_t;

      // Methods
      void getClosestSize(unsigned int* puiWidth, unsigned int* puiHeight);
      void getClosestPixelFormat(WICPixelFormatGUID* pguidDstFormat);
      bool doesSupportTransform(WICBitmapTransformOptions dstTransform);
      BYTE copyPixels(unsigned int uiWidth, unsigned int uiHeight, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize);
      BYTE copyPixels(const WICRect& prc, unsigned int uiWidth, unsigned int uiHeight, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize);
      BYTE copyPixels(const WICRect& prc, unsigned int uiWidth, unsigned int uiHeight, WICPixelFormatGUID* pguidDstFormat, WICBitmapTransformOptions dstTransform, unsigned int nStride, unsigned int cbBufferSize);
    };

    class MetadataQueryReader : public COMObject
    {
    public:
      // Constructors
      MetadataQueryReader() {}
      MetadataQueryReader(nullptr_t) {}
      explicit MetadataQueryReader(::IWICMetadataQueryReader* raw) : COMObject(raw) {}
      MetadataQueryReader(const MetadataQueryReader& copy_from) : COMObject(copy_from) {}
      MetadataQueryReader(MetadataQueryReader&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline MetadataQueryReader& operator= (const MetadataQueryReader& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline MetadataQueryReader& operator= (MetadataQueryReader&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICMetadataQueryReader* getRawInterface() {return static_cast<::IWICMetadataQueryReader*>(COMObject::getRawInterface());}
      inline const ::IWICMetadataQueryReader* getRawInterface() const {return static_cast<const ::IWICMetadataQueryReader*>(COMObject::getRawInterface());}
      inline void swap(MetadataQueryReader& other) {COMObject::swap(other);}
      typedef ::IWICMetadataQueryReader dumb_t;

      // Methods
      IEnumString* getEnumerator();
      GUID getContainerFormat();

      template <typename wchar_t_Container>
      unsigned int getLocation(wchar_t_Container&& wzNamespace)
      {
        unsigned int pcchActualLength = unsigned int();
        HRESULT hr = getRawInterface()->GetLocation(static_cast<unsigned int>(C6::internal::ecount<wchar_t_Container>::size(wzNamespace)), C6::internal::ecount<wchar_t_Container>::data(wzNamespace), &pcchActualLength);
        if(FAILED(hr)) throw COMException(hr, "IWICMetadataQueryReader::GetLocation");
        return pcchActualLength;
      }

      void getMetadataByName(LPCWSTR wzName, PROPVARIANT* pvarValue);
    };

    class MetadataQueryWriter : public WIC::MetadataQueryReader
    {
    public:
      // Constructors
      MetadataQueryWriter() {}
      MetadataQueryWriter(nullptr_t) {}
      explicit MetadataQueryWriter(::IWICMetadataQueryWriter* raw) : WIC::MetadataQueryReader(raw) {}
      MetadataQueryWriter(const MetadataQueryWriter& copy_from) : WIC::MetadataQueryReader(copy_from) {}
      MetadataQueryWriter(MetadataQueryWriter&& move_from) : WIC::MetadataQueryReader(std::move(move_from)) {}

      // Operators
      inline MetadataQueryWriter& operator= (const MetadataQueryWriter& copy_from) {WIC::MetadataQueryReader::operator=(copy_from); return *this;}
      inline MetadataQueryWriter& operator= (MetadataQueryWriter&& move_from) {WIC::MetadataQueryReader::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICMetadataQueryWriter* getRawInterface() {return static_cast<::IWICMetadataQueryWriter*>(WIC::MetadataQueryReader::getRawInterface());}
      inline const ::IWICMetadataQueryWriter* getRawInterface() const {return static_cast<const ::IWICMetadataQueryWriter*>(WIC::MetadataQueryReader::getRawInterface());}
      inline void swap(MetadataQueryWriter& other) {WIC::MetadataQueryReader::swap(other);}
      typedef ::IWICMetadataQueryWriter dumb_t;

      // Methods
      void removeMetadataByName(LPCWSTR wzName);
      void setMetadataByName(LPCWSTR wzName, const PROPVARIANT& pvarValue);
    };

    class ProgressCallback : public COMObject
    {
    public:
      // Constructors
      ProgressCallback() {}
      ProgressCallback(nullptr_t) {}
      explicit ProgressCallback(::IWICProgressCallback* raw) : COMObject(raw) {}
      ProgressCallback(const ProgressCallback& copy_from) : COMObject(copy_from) {}
      ProgressCallback(ProgressCallback&& move_from) : COMObject(std::move(move_from)) {}

      // Operators
      inline ProgressCallback& operator= (const ProgressCallback& copy_from) {COMObject::operator=(copy_from); return *this;}
      inline ProgressCallback& operator= (ProgressCallback&& move_from) {COMObject::operator=(std::move(move_from)); return *this;}
      _OPERATOR_BOOL() const {return getRawInterface() ? _CONVERTIBLE_TO_TRUE : 0;}

      // Utilities
      inline ::IWICProgressCallback* getRawInterface() {return static_cast<::IWICProgressCallback*>(COMObject::getRawInterface());}
      inline const ::IWICProgressCallback* getRawInterface() const {return static_cast<const ::IWICProgressCallback*>(COMObject::getRawInterface());}
      inline void swap(ProgressCallback& other) {COMObject::swap(other);}
      typedef ::IWICProgressCallback dumb_t;

      // Methods
      void notify(ULONG uFrameNum, WICProgressOperation operation, double dblProgress);
    };
  }
  namespace internal
  {
    template <>
    struct ecount<WIC::Stream&>
    {
      static size_t size(WIC::Stream& x) {return 1;}
      static IWICStream*const* data(WIC::Stream& x) {return reinterpret_cast<IWICStream*const*>(&x);}
    };
    template <>
    struct ecount<WIC::FastMetadataEncoder&>
    {
      static size_t size(WIC::FastMetadataEncoder& x) {return 1;}
      static IWICFastMetadataEncoder*const* data(WIC::FastMetadataEncoder& x) {return reinterpret_cast<IWICFastMetadataEncoder*const*>(&x);}
    };
    template <>
    struct ecount<WIC::Palette&>
    {
      static size_t size(WIC::Palette& x) {return 1;}
      static IWICPalette*const* data(WIC::Palette& x) {return reinterpret_cast<IWICPalette*const*>(&x);}
    };
    template <>
    struct ecount<WIC::EnumMetadataItem&>
    {
      static size_t size(WIC::EnumMetadataItem& x) {return 1;}
      static IWICEnumMetadataItem*const* data(WIC::EnumMetadataItem& x) {return reinterpret_cast<IWICEnumMetadataItem*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapCodecProgressNotification&>
    {
      static size_t size(WIC::BitmapCodecProgressNotification& x) {return 1;}
      static IWICBitmapCodecProgressNotification*const* data(WIC::BitmapCodecProgressNotification& x) {return reinterpret_cast<IWICBitmapCodecProgressNotification*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ProgressiveLevelControl&>
    {
      static size_t size(WIC::ProgressiveLevelControl& x) {return 1;}
      static IWICProgressiveLevelControl*const* data(WIC::ProgressiveLevelControl& x) {return reinterpret_cast<IWICProgressiveLevelControl*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapFrameEncode&>
    {
      static size_t size(WIC::BitmapFrameEncode& x) {return 1;}
      static IWICBitmapFrameEncode*const* data(WIC::BitmapFrameEncode& x) {return reinterpret_cast<IWICBitmapFrameEncode*const*>(&x);}
    };
    template <>
    struct ecount<WIC::DevelopRawNotificationCallback&>
    {
      static size_t size(WIC::DevelopRawNotificationCallback& x) {return 1;}
      static IWICDevelopRawNotificationCallback*const* data(WIC::DevelopRawNotificationCallback& x) {return reinterpret_cast<IWICDevelopRawNotificationCallback*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapLock&>
    {
      static size_t size(WIC::BitmapLock& x) {return 1;}
      static IWICBitmapLock*const* data(WIC::BitmapLock& x) {return reinterpret_cast<IWICBitmapLock*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ImagingFactory&>
    {
      static size_t size(WIC::ImagingFactory& x) {return 1;}
      static IWICImagingFactory*const* data(WIC::ImagingFactory& x) {return reinterpret_cast<IWICImagingFactory*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapSource&>
    {
      static size_t size(WIC::BitmapSource& x) {return 1;}
      static IWICBitmapSource*const* data(WIC::BitmapSource& x) {return reinterpret_cast<IWICBitmapSource*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapFrameDecode&>
    {
      static size_t size(WIC::BitmapFrameDecode& x) {return 1;}
      static IWICBitmapFrameDecode*const* data(WIC::BitmapFrameDecode& x) {return reinterpret_cast<IWICBitmapFrameDecode*const*>(&x);}
    };
    template <>
    struct ecount<WIC::DevelopRaw&>
    {
      static size_t size(WIC::DevelopRaw& x) {return 1;}
      static IWICDevelopRaw*const* data(WIC::DevelopRaw& x) {return reinterpret_cast<IWICDevelopRaw*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapClipper&>
    {
      static size_t size(WIC::BitmapClipper& x) {return 1;}
      static IWICBitmapClipper*const* data(WIC::BitmapClipper& x) {return reinterpret_cast<IWICBitmapClipper*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapFlipRotator&>
    {
      static size_t size(WIC::BitmapFlipRotator& x) {return 1;}
      static IWICBitmapFlipRotator*const* data(WIC::BitmapFlipRotator& x) {return reinterpret_cast<IWICBitmapFlipRotator*const*>(&x);}
    };
    template <>
    struct ecount<WIC::FormatConverter&>
    {
      static size_t size(WIC::FormatConverter& x) {return 1;}
      static IWICFormatConverter*const* data(WIC::FormatConverter& x) {return reinterpret_cast<IWICFormatConverter*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ColorTransform&>
    {
      static size_t size(WIC::ColorTransform& x) {return 1;}
      static IWICColorTransform*const* data(WIC::ColorTransform& x) {return reinterpret_cast<IWICColorTransform*const*>(&x);}
    };
    template <>
    struct ecount<WIC::Bitmap&>
    {
      static size_t size(WIC::Bitmap& x) {return 1;}
      static IWICBitmap*const* data(WIC::Bitmap& x) {return reinterpret_cast<IWICBitmap*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapScaler&>
    {
      static size_t size(WIC::BitmapScaler& x) {return 1;}
      static IWICBitmapScaler*const* data(WIC::BitmapScaler& x) {return reinterpret_cast<IWICBitmapScaler*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapEncoder&>
    {
      static size_t size(WIC::BitmapEncoder& x) {return 1;}
      static IWICBitmapEncoder*const* data(WIC::BitmapEncoder& x) {return reinterpret_cast<IWICBitmapEncoder*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapDecoder&>
    {
      static size_t size(WIC::BitmapDecoder& x) {return 1;}
      static IWICBitmapDecoder*const* data(WIC::BitmapDecoder& x) {return reinterpret_cast<IWICBitmapDecoder*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ColorContext&>
    {
      static size_t size(WIC::ColorContext& x) {return 1;}
      static IWICColorContext*const* data(WIC::ColorContext& x) {return reinterpret_cast<IWICColorContext*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ComponentInfo&>
    {
      static size_t size(WIC::ComponentInfo& x) {return 1;}
      static IWICComponentInfo*const* data(WIC::ComponentInfo& x) {return reinterpret_cast<IWICComponentInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::FormatConverterInfo&>
    {
      static size_t size(WIC::FormatConverterInfo& x) {return 1;}
      static IWICFormatConverterInfo*const* data(WIC::FormatConverterInfo& x) {return reinterpret_cast<IWICFormatConverterInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::PixelFormatInfo&>
    {
      static size_t size(WIC::PixelFormatInfo& x) {return 1;}
      static IWICPixelFormatInfo*const* data(WIC::PixelFormatInfo& x) {return reinterpret_cast<IWICPixelFormatInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::PixelFormatInfo2&>
    {
      static size_t size(WIC::PixelFormatInfo2& x) {return 1;}
      static IWICPixelFormatInfo2*const* data(WIC::PixelFormatInfo2& x) {return reinterpret_cast<IWICPixelFormatInfo2*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapCodecInfo&>
    {
      static size_t size(WIC::BitmapCodecInfo& x) {return 1;}
      static IWICBitmapCodecInfo*const* data(WIC::BitmapCodecInfo& x) {return reinterpret_cast<IWICBitmapCodecInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapEncoderInfo&>
    {
      static size_t size(WIC::BitmapEncoderInfo& x) {return 1;}
      static IWICBitmapEncoderInfo*const* data(WIC::BitmapEncoderInfo& x) {return reinterpret_cast<IWICBitmapEncoderInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapDecoderInfo&>
    {
      static size_t size(WIC::BitmapDecoderInfo& x) {return 1;}
      static IWICBitmapDecoderInfo*const* data(WIC::BitmapDecoderInfo& x) {return reinterpret_cast<IWICBitmapDecoderInfo*const*>(&x);}
    };
    template <>
    struct ecount<WIC::BitmapSourceTransform&>
    {
      static size_t size(WIC::BitmapSourceTransform& x) {return 1;}
      static IWICBitmapSourceTransform*const* data(WIC::BitmapSourceTransform& x) {return reinterpret_cast<IWICBitmapSourceTransform*const*>(&x);}
    };
    template <>
    struct ecount<WIC::MetadataQueryReader&>
    {
      static size_t size(WIC::MetadataQueryReader& x) {return 1;}
      static IWICMetadataQueryReader*const* data(WIC::MetadataQueryReader& x) {return reinterpret_cast<IWICMetadataQueryReader*const*>(&x);}
    };
    template <>
    struct ecount<WIC::MetadataQueryWriter&>
    {
      static size_t size(WIC::MetadataQueryWriter& x) {return 1;}
      static IWICMetadataQueryWriter*const* data(WIC::MetadataQueryWriter& x) {return reinterpret_cast<IWICMetadataQueryWriter*const*>(&x);}
    };
    template <>
    struct ecount<WIC::ProgressCallback&>
    {
      static size_t size(WIC::ProgressCallback& x) {return 1;}
      static IWICProgressCallback*const* data(WIC::ProgressCallback& x) {return reinterpret_cast<IWICProgressCallback*const*>(&x);}
    };
  }
}
namespace std {
  inline void swap(C6::WIC::BitmapCodecInfo& a, C6::WIC::BitmapCodecInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::DevelopRaw& a, C6::WIC::DevelopRaw& b) {a.swap(b);}
  inline void swap(C6::WIC::PixelFormatInfo& a, C6::WIC::PixelFormatInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::MetadataQueryWriter& a, C6::WIC::MetadataQueryWriter& b) {a.swap(b);}
  inline void swap(C6::WIC::ColorContext& a, C6::WIC::ColorContext& b) {a.swap(b);}
  inline void swap(C6::WIC::FastMetadataEncoder& a, C6::WIC::FastMetadataEncoder& b) {a.swap(b);}
  inline void swap(C6::WIC::Palette& a, C6::WIC::Palette& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapScaler& a, C6::WIC::BitmapScaler& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapFrameDecode& a, C6::WIC::BitmapFrameDecode& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapSource& a, C6::WIC::BitmapSource& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapCodecProgressNotification& a, C6::WIC::BitmapCodecProgressNotification& b) {a.swap(b);}
  inline void swap(C6::WIC::ProgressiveLevelControl& a, C6::WIC::ProgressiveLevelControl& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapDecoder& a, C6::WIC::BitmapDecoder& b) {a.swap(b);}
  inline void swap(C6::WIC::Bitmap& a, C6::WIC::Bitmap& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapFrameEncode& a, C6::WIC::BitmapFrameEncode& b) {a.swap(b);}
  inline void swap(C6::WIC::DevelopRawNotificationCallback& a, C6::WIC::DevelopRawNotificationCallback& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapLock& a, C6::WIC::BitmapLock& b) {a.swap(b);}
  inline void swap(C6::WIC::ProgressCallback& a, C6::WIC::ProgressCallback& b) {a.swap(b);}
  inline void swap(C6::WIC::ImagingFactory& a, C6::WIC::ImagingFactory& b) {a.swap(b);}
  inline void swap(C6::WIC::ComponentInfo& a, C6::WIC::ComponentInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::PixelFormatInfo2& a, C6::WIC::PixelFormatInfo2& b) {a.swap(b);}
  inline void swap(C6::WIC::FormatConverterInfo& a, C6::WIC::FormatConverterInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::ColorTransform& a, C6::WIC::ColorTransform& b) {a.swap(b);}
  inline void swap(C6::WIC::MetadataQueryReader& a, C6::WIC::MetadataQueryReader& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapClipper& a, C6::WIC::BitmapClipper& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapEncoderInfo& a, C6::WIC::BitmapEncoderInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapEncoder& a, C6::WIC::BitmapEncoder& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapDecoderInfo& a, C6::WIC::BitmapDecoderInfo& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapSourceTransform& a, C6::WIC::BitmapSourceTransform& b) {a.swap(b);}
  inline void swap(C6::WIC::FormatConverter& a, C6::WIC::FormatConverter& b) {a.swap(b);}
  inline void swap(C6::WIC::Stream& a, C6::WIC::Stream& b) {a.swap(b);}
  inline void swap(C6::WIC::EnumMetadataItem& a, C6::WIC::EnumMetadataItem& b) {a.swap(b);}
  inline void swap(C6::WIC::BitmapFlipRotator& a, C6::WIC::BitmapFlipRotator& b) {a.swap(b);}
}
